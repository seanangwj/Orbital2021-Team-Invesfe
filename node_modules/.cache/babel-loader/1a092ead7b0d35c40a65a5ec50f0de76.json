{"ast":null,"code":"var _jsxFileName = \"/Users/seanang/Orbital2021-Team-Invesfe/src/budgetTracker/AppContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer, useContext, useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { db, fire } from \"../config/Firebase.js\";\nimport { UserContext } from \"../components/UserContext\";\nimport { StarRate } from '@material-ui/icons'; // 5. The reduceer - this is used to update the state, based on the action\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_EXPENSE':\n      return { ...state,\n        expenses: [...state.expenses, action.payload]\n      };\n\n    case 'DELETE_EXPENSE':\n      return { ...state,\n        expenses: state.expenses.filter(expense => expense.id !== action.payload)\n      };\n\n    case 'SET_BUDGET':\n      return { ...state,\n        budget: action.payload\n      };\n\n    default:\n      return state;\n  }\n}; // 1. Sets the initial state when the app loads\n\n_c = AppReducer;\nconst initialState = {\n  expenses: []\n}; // 2. Creates the context this is the thing our components import and use to get the state\n\nexport const AppContext = /*#__PURE__*/createContext(); // 3. Provider component - wraps the components we want to give access to the state\n// Accepts the children, which are the nested(wrapped) components\n\nexport const AppProvider = props => {\n  _s();\n\n  const currentUser = useContext(UserContext);\n  useEffect(() => {\n    if (currentUser != null) {\n      db.child(\"users\").child(currentUser.uid).child(\"budget\").child(\"budgettracker\").child(\"expenseTotal\").on(\"value\", snapshot => {\n        const array = snapshot.val();\n        updateState(array);\n      });\n    }\n  }, []); // 4. Sets up the app state. takes a reducer, and an initial state\n\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  if (currentUser != null) {\n    db.child(\"users\").child(currentUser.uid).child(\"budget\").child(\"budgettracker\").child(\"expenseTotal\").set(state);\n  }\n\n  const [newState, setState] = useState([]);\n\n  const updateState = array => {\n    state = array;\n  }; // 5. Returns our context. Pass in the values we want to expose\n\n\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      expenses: state.expenses,\n      dispatch\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 3\n  }, this);\n};\n\n_s(AppProvider, \"iRupGJzAkHBUoOq9gnsUkhChzGI=\");\n\n_c2 = AppProvider;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AppReducer\");\n$RefreshReg$(_c2, \"AppProvider\");","map":{"version":3,"sources":["/Users/seanang/Orbital2021-Team-Invesfe/src/budgetTracker/AppContext.js"],"names":["React","createContext","useReducer","useContext","useState","useEffect","v4","uuidv4","db","fire","UserContext","StarRate","AppReducer","state","action","type","expenses","payload","filter","expense","id","budget","initialState","AppContext","AppProvider","props","currentUser","child","uid","on","snapshot","array","val","updateState","dispatch","set","newState","setState","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,UAA3C,EAAuDC,QAAvD,EAAiEC,SAAjE,QAAkF,OAAlF;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,SAASC,EAAT,EAAaC,IAAb,QAAyB,uBAAzB;AACA,SAASC,WAAT,QAA2B,2BAA3B;AACA,SAASC,QAAT,QAAyB,oBAAzB,C,CAGA;;;AACA,OAAO,MAAMC,UAAU,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5C,UAAQA,MAAM,CAACC,IAAf;AACC,SAAK,aAAL;AACC,aAAO,EACN,GAAGF,KADG;AAENG,QAAAA,QAAQ,EAAE,CAAC,GAAGH,KAAK,CAACG,QAAV,EAAoBF,MAAM,CAACG,OAA3B;AAFJ,OAAP;;AAID,SAAK,gBAAL;AACC,aAAO,EACN,GAAGJ,KADG;AAENG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeE,MAAf,CACRC,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACG,OAD1B;AAFJ,OAAP;;AAMD,SAAK,YAAL;AACC,aAAO,EACN,GAAGJ,KADG;AAENQ,QAAAA,MAAM,EAAEP,MAAM,CAACG;AAFT,OAAP;;AAKD;AACC,aAAOJ,KAAP;AApBF;AAsBA,CAvBM,C,CAyBP;;KAzBaD,U;AA2Bb,MAAMU,YAAY,GAAG;AACpBN,EAAAA,QAAQ,EAAE;AADU,CAArB,C,CAKA;;AACA,OAAO,MAAMO,UAAU,gBAAGtB,aAAa,EAAhC,C,CAEP;AACA;;AACA,OAAO,MAAMuB,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAErC,QAAMC,WAAW,GAAGvB,UAAU,CAACO,WAAD,CAA9B;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIqB,WAAW,IAAI,IAAnB,EAAyB;AACvBlB,MAAAA,EAAE,CAACmB,KAAH,CAAS,OAAT,EACAA,KADA,CACMD,WAAW,CAACE,GADlB,EAEAD,KAFA,CAEM,QAFN,EAGAA,KAHA,CAGM,eAHN,EAIAA,KAJA,CAIM,cAJN,EAKAE,EALA,CAKG,OALH,EAKaC,QAAD,IAAc;AAC3B,cAAMC,KAAK,GAAGD,QAAQ,CAACE,GAAT,EAAd;AACAC,QAAAA,WAAW,CAACF,KAAD,CAAX;AACA,OARC;AASA;AAAC,GAXK,EAWH,EAXG,CAAT,CAJqC,CAkBrC;;AACA,QAAM,CAAClB,KAAD,EAAQqB,QAAR,IAAoBhC,UAAU,CAACU,UAAD,EAAaU,YAAb,CAApC;;AACA,MAAII,WAAW,IAAI,IAAnB,EAAyB;AACtBlB,IAAAA,EAAE,CAACmB,KAAH,CAAS,OAAT,EACEA,KADF,CACQD,WAAW,CAACE,GADpB,EAEED,KAFF,CAEQ,QAFR,EAGEA,KAHF,CAGQ,eAHR,EAIEA,KAJF,CAIQ,cAJR,EAKEQ,GALF,CAKMtB,KALN;AAME;;AAEL,QAAM,CAACuB,QAAD,EAAWC,QAAX,IAAuBjC,QAAQ,CAAC,EAAD,CAArC;;AACA,QAAM6B,WAAW,GAAIF,KAAD,IAAW;AAC9BlB,IAAAA,KAAK,GAAGkB,KAAR;AACA,GAFD,CA9BqC,CAkCrC;;;AACA,sBACC,QAAC,UAAD,CAAY,QAAZ;AACC,IAAA,KAAK,EAAE;AACNf,MAAAA,QAAQ,EAAEH,KAAK,CAACG,QADV;AAENkB,MAAAA;AAFM,KADR;AAAA,cAMET,KAAK,CAACa;AANR;AAAA;AAAA;AAAA;AAAA,UADD;AAUA,CA7CM;;GAAMd,W;;MAAAA,W","sourcesContent":["import React, { createContext, useReducer, useContext, useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { db, fire } from \"../config/Firebase.js\";\nimport { UserContext} from \"../components/UserContext\";\nimport { StarRate } from '@material-ui/icons';\n\n\n// 5. The reduceer - this is used to update the state, based on the action\nexport const AppReducer = (state, action) => {\n\tswitch (action.type) {\n\t\tcase 'ADD_EXPENSE':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\texpenses: [...state.expenses, action.payload],\n\t\t\t};\n\t\tcase 'DELETE_EXPENSE':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\texpenses: state.expenses.filter(\n\t\t\t\t\t(expense) => expense.id !== action.payload\n\t\t\t\t),\n\t\t\t};\n\t\tcase 'SET_BUDGET':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tbudget: action.payload,\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\t\n};\n\n// 1. Sets the initial state when the app loads\n\nconst initialState = {\n\texpenses: [],\n};\n\n\n// 2. Creates the context this is the thing our components import and use to get the state\nexport const AppContext = createContext();\n\n// 3. Provider component - wraps the components we want to give access to the state\n// Accepts the children, which are the nested(wrapped) components\nexport const AppProvider = (props) => {\n\n\tconst currentUser = useContext(UserContext);\n\t\n\tuseEffect(() => {\n\t\tif (currentUser != null) {\n\t\t  db.child(\"users\")\n\t\t\t.child(currentUser.uid)\n\t\t\t.child(\"budget\")\n\t\t\t.child(\"budgettracker\")\n\t\t\t.child(\"expenseTotal\")\n\t\t\t.on(\"value\", (snapshot) => {\n\t\t\tconst array = snapshot.val();\n\t\t\tupdateState(array);\n\t\t});\n\t  }}, []);\n\n\t\n\t// 4. Sets up the app state. takes a reducer, and an initial state\n\tconst [state, dispatch] = useReducer(AppReducer, initialState);\n\tif (currentUser != null) {\n\t\t\t\tdb.child(\"users\")\n\t\t\t  .child(currentUser.uid)\n\t\t\t  .child(\"budget\")\n\t\t\t  .child(\"budgettracker\")\n\t\t\t  .child(\"expenseTotal\")\n\t\t\t  .set(state)\n\t\t\t  }\n\n\tconst [newState, setState] = useState([]);\t\t  \n\tconst updateState = (array) => {\n\t\tstate = array;\n\t}\n\n\t// 5. Returns our context. Pass in the values we want to expose\n\treturn (\n\t\t<AppContext.Provider\n\t\t\tvalue={{\n\t\t\t\texpenses: state.expenses,\n\t\t\t\tdispatch,\n\t\t\t}}\n\t\t>\n\t\t\t{props.children}\n\t\t</AppContext.Provider>\n\t);\n};"]},"metadata":{},"sourceType":"module"}