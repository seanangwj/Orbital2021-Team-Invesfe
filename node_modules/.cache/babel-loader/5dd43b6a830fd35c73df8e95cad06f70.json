{"ast":null,"code":"var _jsxFileName = \"/Users/seanang/invesfe-app/src/components/IntrinsicValue.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"../styles/Intrinsic.css\";\nimport NavBar from \"./Navbar\";\nimport { Tooltip, Icon, makeStyles } from \"@material-ui/core\";\nimport HelpOutlineIcon from \"@material-ui/icons/HelpOutline\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    margin: theme.spacing(1)\n  },\n  customWidth: {\n    width: 800,\n    height: 100,\n    fontSize: 20\n  }\n}));\n\nfunction IntrinsicValue(props) {\n  _s();\n\n  const [netProfit, newNetProfit] = useState(\"33000\");\n  const [depAndAmort, newDepAndAmort] = useState(\"6000\");\n  const [increaseInWC, newIncreaseINWC] = useState(\"6000\");\n  const [capitalExpenditure, newCapitalExpenditure] = useState(\"15000\");\n  const [debtRepayment, newDebtRepayment] = useState(\"600\");\n  const [debtRaised, newDebtRaised] = useState(\"200\");\n  const [numOfShares, newNumOfShares] = useState(\"2000\");\n  const [rateOfReturn, newRateOfReturn] = useState(\"5\");\n  const [fcfeGrowth, newFcfeGrowth] = useState(\"15\");\n  const [intrinsicValue, newIntrinsicValue] = useState(\"0\");\n  const {\n    array\n  } = props;\n  var fcfeY1 = parseFloat(netProfit) + parseFloat(depAndAmort) - parseFloat(increaseInWC) - parseFloat(capitalExpenditure) - parseFloat(debtRepayment) + parseFloat(debtRaised);\n  const projectedFCFE = [];\n\n  const calculateIntrinsicValue = () => {\n    let iv = 0;\n\n    for (let index = 1; index <= 5; index++) {\n      iv += projectedFCFE[index - 1].value / Math.pow(1 + rateOfReturn / 100, index);\n    }\n\n    iv += projectedFCFE[4].value.toFixed(2) * (1 / (rateOfReturn / 100)) / Math.pow(1 + rateOfReturn / 100, 5);\n    newIntrinsicValue(iv);\n  };\n\n  for (let index = 1; index <= 5; index++) {\n    projectedFCFE.push({\n      label: `${index}`,\n      value: fcfeY1 * Math.pow(1 + fcfeGrowth / 100, index - 1)\n    });\n  }\n\n  const text = \"Net income after taxes (NIAT) is a financial term used to describe a company's profit after all taxes have been paid. Net income after taxes is an accounting term and is most often found in a company's quarterly and annual financial reports. Net income after taxes represents the profit or earnings after all expense have been deducted from revenue. Net income after taxes calculation can be shown as both a total dollar amount and a per-share calculation.\";\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: \"Valuation Model\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"valuation-table\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"labelBox\",\n              children: [\"Net Profit after Tax ($) :\", /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"intrinsic\",\n                type: \"number\",\n                id: \"netProfit\",\n                name: \"netProfit\",\n                value: netProfit,\n                onChange: event => newNetProfit(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: text,\n                classes: {\n                  tooltip: classes.customWidth\n                },\n                children: /*#__PURE__*/_jsxDEV(Icon, {\n                  children: /*#__PURE__*/_jsxDEV(HelpOutlineIcon, {\n                    className: classes.icon\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 88,\n                    columnNumber: 15\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 13\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"validity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"labelBox\",\n              children: [\"Depreciation and Amortisation ($) :\", /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"intrinsic\",\n                type: \"number\",\n                id: \"depAndAmort\",\n                name: \"depAndAmort\",\n                value: depAndAmort,\n                onChange: event => newDepAndAmort(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"validity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"labelBox\",\n              children: [\"Increase in Working Capital ($) :\", /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"intrinsic\",\n                type: \"number\",\n                id: \"increaseInWC\",\n                name: \"increaseInWC\",\n                value: increaseInWC,\n                onChange: event => newIncreaseINWC(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"validity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"labelBox\",\n            children: [\"Capital Expenditure ($) :\", /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"intrinsic\",\n              type: \"number\",\n              min: \"0\",\n              id: \"capitalExpenditure\",\n              name: \"capitalExpenditure\",\n              value: capitalExpenditure,\n              onChange: event => newCapitalExpenditure(event.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              class: \"validity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"labelBox\",\n            children: [\"Debt Repayment on existing debt ($) :\", /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"intrinsic\",\n              type: \"number\",\n              id: \"debtRepayment\",\n              name: \"debtRepayment\",\n              min: \"0\",\n              value: debtRepayment,\n              onChange: event => newDebtRepayment(event.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              class: \"validity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"labelBox\",\n            children: [\"Fresh Debt Raised ($) :\", /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"intrinsic\",\n              type: \"number\",\n              id: \"debtRaised\",\n              min: \"0\",\n              name: \"debtRaised\",\n              value: debtRaised,\n              onChange: event => newDebtRaised(event.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              class: \"validity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"labelBox\",\n          children: [\"No. of Outstanding Shares :\", /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"intrinsic\",\n            type: \"number\",\n            id: \"numOfShares\",\n            name: \"numOfShares\",\n            min: \"1\",\n            value: numOfShares,\n            onChange: event => newNumOfShares(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"validity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"labelBox\",\n          children: [\"Required rate of return (%) :\", /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"intrinsic\",\n            type: \"number\",\n            id: \"rateOfReturn\",\n            name: \"rateOfReturn\",\n            min: \"0\",\n            value: rateOfReturn,\n            onChange: event => newRateOfReturn(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"validity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"labelBox\",\n          children: [\"FCFE Growth Rate (%) :\", /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"intrinsic\",\n            type: \"number\",\n            id: \"fcfeGrowth\",\n            name: \"fcfeGrowth\",\n            min: \"0\",\n            value: fcfeGrowth,\n            onChange: event => newFcfeGrowth(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"validity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"intrinsic-btn\",\n      onClick: () => calculateIntrinsicValue(),\n      children: \"Calculate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"value-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Year\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Projected FCFE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: projectedFCFE.map(({\n            label,\n            value\n          }) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [\"$\", value.toFixed(2), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 17\n            }, this)]\n          }, label, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelBox\",\n        children: [\"Terminal Value =\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: (projectedFCFE[4].value * (1 / (rateOfReturn / 100))).toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelBox\",\n        children: [\"Intrinsic Value For Company =\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: (intrinsicValue * 1).toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"final-labelBox\",\n        children: [\"Intrinsic Value per Share =\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: (intrinsicValue / numOfShares).toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(IntrinsicValue, \"oBj3U3zqS0uj3PNr3v9v8OWtZU0=\", false, function () {\n  return [useStyles];\n});\n\n_c = IntrinsicValue;\nexport default IntrinsicValue;\n\nvar _c;\n\n$RefreshReg$(_c, \"IntrinsicValue\");","map":{"version":3,"sources":["/Users/seanang/invesfe-app/src/components/IntrinsicValue.js"],"names":["useState","NavBar","Tooltip","Icon","makeStyles","HelpOutlineIcon","useStyles","theme","icon","margin","spacing","customWidth","width","height","fontSize","IntrinsicValue","props","netProfit","newNetProfit","depAndAmort","newDepAndAmort","increaseInWC","newIncreaseINWC","capitalExpenditure","newCapitalExpenditure","debtRepayment","newDebtRepayment","debtRaised","newDebtRaised","numOfShares","newNumOfShares","rateOfReturn","newRateOfReturn","fcfeGrowth","newFcfeGrowth","intrinsicValue","newIntrinsicValue","array","fcfeY1","parseFloat","projectedFCFE","calculateIntrinsicValue","iv","index","value","Math","pow","toFixed","push","label","text","classes","event","target","tooltip","map"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport \"../styles/Intrinsic.css\";\nimport NavBar from \"./Navbar\";\nimport { Tooltip, Icon, makeStyles } from \"@material-ui/core\";\nimport HelpOutlineIcon from \"@material-ui/icons/HelpOutline\";\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    margin: theme.spacing(1),\n  },\n\n  customWidth: {\n    width: 800,\n    height: 100,\n    fontSize: 20,\n  },\n\n}));\n\nfunction IntrinsicValue(props) {\n  const [netProfit, newNetProfit] = useState(\"33000\");\n  const [depAndAmort, newDepAndAmort] = useState(\"6000\");\n  const [increaseInWC, newIncreaseINWC] = useState(\"6000\");\n  const [capitalExpenditure, newCapitalExpenditure] = useState(\"15000\");\n  const [debtRepayment, newDebtRepayment] = useState(\"600\");\n  const [debtRaised, newDebtRaised] = useState(\"200\");\n  const [numOfShares, newNumOfShares] = useState(\"2000\");\n  const [rateOfReturn, newRateOfReturn] = useState(\"5\");\n  const [fcfeGrowth, newFcfeGrowth] = useState(\"15\");\n  const [intrinsicValue, newIntrinsicValue] = useState(\"0\");\n  const {array} = props;\n  var fcfeY1 =\n    parseFloat(netProfit) +\n    parseFloat(depAndAmort) -\n    parseFloat(increaseInWC) -\n    parseFloat(capitalExpenditure) -\n    parseFloat(debtRepayment) +\n    parseFloat(debtRaised);\n\n  const projectedFCFE = [];\n\n  const calculateIntrinsicValue = () => {\n    let iv = 0;\n    for (let index = 1; index <= 5; index++) {\n      iv +=\n        projectedFCFE[index - 1].value /\n        Math.pow(1 + rateOfReturn / 100, index);\n    }\n    iv +=\n      (projectedFCFE[4].value.toFixed(2) * (1 / (rateOfReturn / 100))) /\n      Math.pow(1 + rateOfReturn / 100, 5);\n    newIntrinsicValue(iv);\n  };\n\n  for (let index = 1; index <= 5; index++) {\n    projectedFCFE.push({\n      label: `${index}`,\n      value: fcfeY1 * Math.pow(1 + fcfeGrowth / 100, index - 1),\n    });\n  }\n\n  const text =\n    \"Net income after taxes (NIAT) is a financial term used to describe a company's profit after all taxes have been paid. Net income after taxes is an accounting term and is most often found in a company's quarterly and annual financial reports. Net income after taxes represents the profit or earnings after all expense have been deducted from revenue. Net income after taxes calculation can be shown as both a total dollar amount and a per-share calculation.\";\n  const classes = useStyles();\n\n  return (\n    <>\n      <section className=\"header\">\n        <NavBar />\n      </section>\n      <div className=\"title\">Valuation Model</div>\n      <table className=\"valuation-table\">\n      <tbody>\n      <tr>\n      <td>\n        <label className=\"labelBox\">\n          Net Profit after Tax ($) :\n          <input\n            className=\"intrinsic\"\n            type=\"number\"\n            id=\"netProfit\"\n            name=\"netProfit\"\n            value={netProfit}\n            onChange={(event) => newNetProfit(event.target.value)}\n          />\n          <Tooltip title={text} classes={{ tooltip: classes.customWidth }}>\n            <Icon >\n              <HelpOutlineIcon className={classes.icon} />\n            </Icon>\n          </Tooltip>\n          <span class=\"validity\"></span>\n        </label>\n        </td>\n        <br></br>\n        <td>\n        <label className=\"labelBox\">\n          Depreciation and Amortisation ($) :\n          <input\n            className=\"intrinsic\"\n            type=\"number\"\n            id=\"depAndAmort\"\n            name=\"depAndAmort\"\n            value={depAndAmort}\n            onChange={(event) => newDepAndAmort(event.target.value)}\n          />\n          <span class=\"validity\"></span>\n        </label>\n        <br></br>\n        </td>\n        <td>\n        <label className=\"labelBox\">\n          Increase in Working Capital ($) :\n          <input\n            className=\"intrinsic\"\n            type=\"number\"\n            id=\"increaseInWC\"\n            name=\"increaseInWC\"\n            value={increaseInWC}\n            onChange={(event) => newIncreaseINWC(event.target.value)}\n          />\n          <span class=\"validity\"></span>\n        </label>\n        </td>\n        </tr>\n        <br></br>\n        <tr>\n        <label className=\"labelBox\">\n          Capital Expenditure ($) :\n          <input\n            className=\"intrinsic\"\n            type=\"number\"\n            min=\"0\"\n            id=\"capitalExpenditure\"\n            name=\"capitalExpenditure\"\n            value={capitalExpenditure}\n            onChange={(event) => newCapitalExpenditure(event.target.value)}\n          />\n          <span class=\"validity\"></span>\n        </label>\n        <br></br>\n        <label className=\"labelBox\">\n          Debt Repayment on existing debt ($) :\n          <input\n            className=\"intrinsic\"\n            type=\"number\"\n            id=\"debtRepayment\"\n            name=\"debtRepayment\"\n            min=\"0\"\n            value={debtRepayment}\n            onChange={(event) => newDebtRepayment(event.target.value)}\n          />\n          <span class=\"validity\"></span>\n        </label>\n        <br></br>\n        <label className=\"labelBox\">\n          Fresh Debt Raised ($) :\n          <input\n            className=\"intrinsic\"\n            type=\"number\"\n            id=\"debtRaised\"\n            min=\"0\"\n            name=\"debtRaised\"\n            value={debtRaised}\n            onChange={(event) => newDebtRaised(event.target.value)}\n          />\n          <span class=\"validity\"></span>\n        </label>\n        </tr>\n        <br></br>\n        <label className=\"labelBox\">\n          No. of Outstanding Shares :\n          <input\n            className=\"intrinsic\"\n            type=\"number\"\n            id=\"numOfShares\"\n            name=\"numOfShares\"\n            min=\"1\"\n            value={numOfShares}\n            onChange={(event) => newNumOfShares(event.target.value)}\n          />\n          <span class=\"validity\"></span>\n        </label>\n        <br></br>\n        <label className=\"labelBox\">\n          Required rate of return (%) :\n          <input\n            className=\"intrinsic\"\n            type=\"number\"\n            id=\"rateOfReturn\"\n            name=\"rateOfReturn\"\n            min=\"0\"\n            value={rateOfReturn}\n            onChange={(event) => newRateOfReturn(event.target.value)}\n          />\n          <span class=\"validity\"></span>\n        </label>\n        <br></br>\n        <label className=\"labelBox\">\n          FCFE Growth Rate (%) :\n          <input\n            className=\"intrinsic\"\n            type=\"number\"\n            id=\"fcfeGrowth\"\n            name=\"fcfeGrowth\"\n            min=\"0\"\n            value={fcfeGrowth}\n            onChange={(event) => newFcfeGrowth(event.target.value)}\n          />\n          <span class=\"validity\"></span>\n        </label>\n      </tbody>\n      </table>\n      <button\n        className=\"intrinsic-btn\"\n        onClick={() => calculateIntrinsicValue()}\n      >\n        Calculate\n      </button>\n\n      <div>\n        <table className=\"value-table\">\n          <thead>\n            <tr>\n              <th>Year</th>\n              <th>Projected FCFE</th>\n            </tr>\n          </thead>\n          <tbody>\n            {projectedFCFE.map(({ label, value }) => (\n              <tr key={label}>\n                <td>{label}</td>\n                <td>${value.toFixed(2)} </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <br></br>\n        <label className=\"labelBox\">\n          Terminal Value =\n          <input\n            type=\"number\"\n            value={(\n              projectedFCFE[4].value *\n              (1 / (rateOfReturn / 100))\n            ).toFixed(2)}\n          />\n        </label>\n        <br></br>\n        <label className=\"labelBox\">\n          Intrinsic Value For Company =\n          <input type=\"number\" value={(intrinsicValue * 1).toFixed(2)} />\n        </label>\n        <br></br>\n        <label className=\"final-labelBox\">\n          Intrinsic Value per Share =\n          <input\n            type=\"number\"\n            value={(intrinsicValue / numOfShares).toFixed(2)}\n          />\n        </label>\n      </div>\n    </>\n  );\n}\n\nexport default IntrinsicValue;\n"]},"metadata":{},"sourceType":"module"}