{"ast":null,"code":"var _jsxFileName = \"/Users/seanang/invesfe-app/src/components/IntrinsicValue.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport '../styles/Intrinsic.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction IntrinsicValue() {\n  _s();\n\n  const [netProfit, newNetProfit] = useState(\"0\");\n  const [depAndAmort, newDepAndAmort] = useState(\"0\");\n  const [increaseInWC, newIncreaseINWC] = useState(\"0\");\n  const [capitalExpenditure, newCapitalExpenditure] = useState(\"0\");\n  const [debtRepayment, newDebtRepayment] = useState(\"0\");\n  const [debtRaised, newDebtRaised] = useState(\"0\");\n  const [numOfShares, newNumOfShares] = useState(\"0\");\n  const [rateOfReturn, newRateOfReturn] = useState(\"0\");\n  const [fcfeGrowth, newFcfeGrowth] = useState(\"0\");\n  var fcfeY1 = parseFloat(netProfit) + parseFloat(depAndAmort) - parseFloat(increaseInWC) - parseFloat(capitalExpenditure) - parseFloat(debtRepayment) + parseFloat(debtRaised);\n  const projectedFCFE = [];\n\n  const calculateIntrinsicValue = () => {\n    let intrinsicValue = 0;\n\n    for (let index = 1; index <= 5; index++) {\n      intrinsicValue += projectedFCFE[index - 1].value / Math.pow(1 + rateOfReturn / 100, index);\n    }\n\n    return intrinsicValue + projectedFCFE[4].value.toFixed(2) * (1 / (rateOfReturn / 100)) / Math.pow(1 + rateOfReturn / 100, 5);\n  };\n\n  for (let index = 1; index <= 5; index++) {\n    projectedFCFE.push({\n      label: `${index}`,\n      value: fcfeY1 * Math.pow(1 + fcfeGrowth / 100, index - 1)\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelBox\",\n        children: [\"Net Profit after Tax ($)\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"netProfit\",\n          name: \"netProfit\",\n          value: netProfit,\n          onChange: event => newNetProfit(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"validity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelBox\",\n        children: [\"Depreciation and Amortisation ($)\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"depAndAmort\",\n          name: \"depAndAmort\",\n          value: depAndAmort,\n          onChange: event => newDepAndAmort(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"validity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelBox\",\n        children: [\"Increase in Working Capital ($)\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"increaseInWC\",\n          name: \"increaseInWC\",\n          value: increaseInWC,\n          onChange: event => newIncreaseINWC(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"validity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelBox\",\n        children: [\"Capital Expenditure ($)\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"capitalExpenditure\",\n          name: \"capitalExpenditure\",\n          value: capitalExpenditure,\n          onChange: event => newCapitalExpenditure(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"validity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelBox\",\n        children: [\"Debt Repayment on existing debt ($)\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"debtRepayment\",\n          name: \"debtRepayment\",\n          min: \"0\",\n          value: debtRepayment,\n          onChange: event => newDebtRepayment(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"validity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelBox\",\n        children: [\"Fresh Debt Raised ($)\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"debtRaised\",\n          name: \"debtRaised\",\n          value: debtRaised,\n          onChange: event => newDebtRaised(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"validity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelBox\",\n        children: [\"No. of Outstanding Shares\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"numOfShares\",\n          name: \"numOfShares\",\n          min: \"0\",\n          max: \"100\",\n          value: numOfShares,\n          onChange: event => newNumOfShares(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelBox\",\n        children: [\"Required rate of return (%)\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"rateOfReturn\",\n          name: \"rateOfReturn\",\n          value: rateOfReturn,\n          onChange: event => newRateOfReturn(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelBox\",\n        children: [\"FCFE Growth Rate (%)\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"fcfeGrowth\",\n          name: \"fcfeGrowth\",\n          min: \"0\",\n          value: fcfeGrowth,\n          onChange: event => newFcfeGrowth(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelBox\",\n        children: [\"FCFE Y1\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: fcfeY1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"value-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Year\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Projected FCFE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: projectedFCFE.map(({\n            label,\n            value\n          }) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [\"$\", value.toFixed(2), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 15\n            }, this)]\n          }, label, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelBox\",\n        children: [\"Terminal Value\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: (projectedFCFE[4].value * (1 / (rateOfReturn / 100))).toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelBox\",\n        children: [\"Intrinsic Value For Company\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: calculateIntrinsicValue().toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelBox\",\n        children: [\"Intrinsic Value per Share\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: (calculateIntrinsicValue() / numOfShares).toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(IntrinsicValue, \"u9KA0hNhhmmoOIiqmSuVi2eCeZ4=\");\n\n_c = IntrinsicValue;\nexport default IntrinsicValue;\n\nvar _c;\n\n$RefreshReg$(_c, \"IntrinsicValue\");","map":{"version":3,"sources":["/Users/seanang/invesfe-app/src/components/IntrinsicValue.js"],"names":["useState","IntrinsicValue","netProfit","newNetProfit","depAndAmort","newDepAndAmort","increaseInWC","newIncreaseINWC","capitalExpenditure","newCapitalExpenditure","debtRepayment","newDebtRepayment","debtRaised","newDebtRaised","numOfShares","newNumOfShares","rateOfReturn","newRateOfReturn","fcfeGrowth","newFcfeGrowth","fcfeY1","parseFloat","projectedFCFE","calculateIntrinsicValue","intrinsicValue","index","value","Math","pow","toFixed","push","label","event","target","map"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport '../styles/Intrinsic.css';\n\nfunction IntrinsicValue() {\n  const [netProfit, newNetProfit] = useState(\"0\");\n  const [depAndAmort, newDepAndAmort] = useState(\"0\");\n  const [increaseInWC, newIncreaseINWC] = useState(\"0\");\n  const [capitalExpenditure, newCapitalExpenditure] = useState(\"0\");\n  const [debtRepayment, newDebtRepayment] = useState(\"0\");\n  const [debtRaised, newDebtRaised] = useState(\"0\");\n  const [numOfShares, newNumOfShares] = useState(\"0\");\n  const [rateOfReturn, newRateOfReturn] = useState(\"0\");\n  const [fcfeGrowth, newFcfeGrowth] = useState(\"0\");\n  var fcfeY1 =\n    parseFloat(netProfit) +\n    parseFloat(depAndAmort) -\n    parseFloat(increaseInWC) -\n    parseFloat(capitalExpenditure) -\n    parseFloat(debtRepayment) +\n    parseFloat(debtRaised);\n  const projectedFCFE = [];\n\n  const calculateIntrinsicValue = () => {\n    let intrinsicValue = 0;\n    for (let index = 1; index <= 5; index++) {\n      intrinsicValue +=\n        (projectedFCFE[index - 1].value / Math.pow(1 + rateOfReturn / 100, index));\n    }\n    return intrinsicValue + (projectedFCFE[4].value.toFixed(2) * (1 / (rateOfReturn / 100))) / \n    Math.pow(1 + (rateOfReturn / 100),5)\n  };\n\n  for (let index = 1; index <= 5; index++) {\n    projectedFCFE.push({\n      label: `${index}`,\n      value: fcfeY1 * Math.pow(1 + fcfeGrowth / 100, index - 1),\n    });\n  }\n\n  return (\n      <>\n      \n    <div>\n      <label className=\"labelBox\">\n        Net Profit after Tax ($)  \n        <input\n          type=\"number\"\n          id=\"netProfit\"\n          name=\"netProfit\"\n          value={netProfit}\n          onChange={(event) => newNetProfit(event.target.value)}\n        />\n        <span class=\"validity\"></span>\n      </label>\n      <label className=\"labelBox\">\n        Depreciation and Amortisation ($)\n        <input\n          type=\"number\"\n          id=\"depAndAmort\"\n          name=\"depAndAmort\"\n          value={depAndAmort}\n          onChange={(event) => newDepAndAmort(event.target.value)}\n        />\n        <span class=\"validity\"></span>\n      </label>\n      <label className=\"labelBox\">\n        Increase in Working Capital ($)\n        <input\n          type=\"number\"\n          id=\"increaseInWC\"\n          name=\"increaseInWC\"\n          value={increaseInWC}\n          onChange={(event) => newIncreaseINWC(event.target.value)}\n        />\n        <span class=\"validity\"></span>\n      </label>\n      <label className=\"labelBox\">\n        Capital Expenditure ($)\n        <input\n          type=\"number\"\n          id=\"capitalExpenditure\"\n          name=\"capitalExpenditure\"\n          value={capitalExpenditure}\n          onChange={(event) => newCapitalExpenditure(event.target.value)}\n        />\n        <span class=\"validity\"></span>\n      </label>\n      <label className=\"labelBox\">\n        Debt Repayment on existing debt ($)\n        <input\n          type=\"number\"\n          id=\"debtRepayment\"\n          name=\"debtRepayment\"\n          min = \"0\"\n          value={debtRepayment}\n          onChange={(event) => newDebtRepayment(event.target.value)}\n        />\n        <span class=\"validity\"></span>\n      </label>\n      <label className=\"labelBox\">\n        Fresh Debt Raised ($)\n        <input\n          type=\"number\"\n          id=\"debtRaised\"\n          name=\"debtRaised\"\n          value={debtRaised}\n          onChange={(event) => newDebtRaised(event.target.value)}\n        />\n        <span class=\"validity\"></span>\n      </label>\n      <label className=\"labelBox\">\n        No. of Outstanding Shares\n        <input\n          type=\"number\"\n          id=\"numOfShares\"\n          name=\"numOfShares\"\n          min = \"0\"\n          max = \"100\"\n          value={numOfShares}\n          onChange={(event) => newNumOfShares(event.target.value)}\n        />\n      </label>\n      <label className=\"labelBox\">\n        Required rate of return (%)\n        <input\n          type=\"number\"\n          id=\"rateOfReturn\"\n          name=\"rateOfReturn\"\n          value={rateOfReturn}\n          onChange={(event) => newRateOfReturn(event.target.value)}\n        />\n      </label>\n      <label className=\"labelBox\">\n        FCFE Growth Rate (%)\n        <input\n          type=\"number\"\n          id=\"fcfeGrowth\"\n          name=\"fcfeGrowth\" \n          min = \"0\"\n          value={fcfeGrowth}\n          onChange={(event) => newFcfeGrowth(event.target.value)}\n        />\n      </label>\n\n      <label className=\"labelBox\">\n        FCFE Y1\n        <input type=\"number\" value={fcfeY1} />\n      </label>\n      </div>\n      <div>\n      <table className = \"value-table\">\n        <thead>\n          <tr>\n            <th>Year</th>\n            <th>Projected FCFE</th>\n          </tr>\n        </thead>\n        <tbody>\n          {projectedFCFE.map(({ label, value }) => (\n            <tr key={label}>\n              <td>{label}</td>\n              <td>${value.toFixed(2)} </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <label className=\"labelBox\">\n        Terminal Value\n        <input\n          type=\"number\"\n          value= {(projectedFCFE[4].value * (1 / (rateOfReturn / 100))).toFixed(2)}\n        />\n      </label>\n      <label className=\"labelBox\">\n        Intrinsic Value For Company\n        <input type=\"number\" value={calculateIntrinsicValue().toFixed(2)} />\n      </label>\n      <label className=\"labelBox\">\n        Intrinsic Value per Share\n        <input type=\"number\" value={(calculateIntrinsicValue() / numOfShares).toFixed(2)} />\n      </label>\n    </div>\n    </>\n  );\n}\n\nexport default IntrinsicValue;\n"]},"metadata":{},"sourceType":"module"}