{"ast":null,"code":"var _jsxFileName = \"/Users/seanang/invesfe-app/src/components/PortfolioChart.js\";\nimport React from \"react\";\nimport { Pie } from \"react-chartjs-2\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PortfolioChart(props) {\n  const {\n    stocks\n  } = props;\n  const stockNames = stocks.map(stock => stock.symbol);\n  const stockValue = stocks.map(stock => stock.amount); //   const [colors, setNewColors] = useState([]);\n\n  let colors = [];\n\n  while (colors.length < stocks.length) {\n    var color = getRandomColor();\n    newColors = [...colors, {\n      color\n    }];\n    colors = colors.push(getRandomColor());\n  }\n\n  const state = {\n    labels: stockNames,\n    datasets: [{\n      label: \"# of votes\",\n      data: stockValue,\n      backgroundColor: colors,\n      borderWidth: 1,\n      cx: 400,\n      cy: 400\n    }]\n  };\n  const options = {\n    plugins: {\n      legend: {\n        display: true,\n        position: \"bottom\"\n      },\n      title: {\n        text: \"Portfolio\",\n        display: true,\n        fontSize: 100\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pie\",\n    children: /*#__PURE__*/_jsxDEV(Pie, {\n      data: state,\n      options: options,\n      cx: 800,\n      cy: 800\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_c = PortfolioChart;\n\nfunction getRandomColor() {\n  var letters = '0123456789ABCDEF'.split('');\n  var color = '#';\n\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n\n  return color;\n}\n\nexport default PortfolioChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"PortfolioChart\");","map":{"version":3,"sources":["/Users/seanang/invesfe-app/src/components/PortfolioChart.js"],"names":["React","Pie","useState","PortfolioChart","props","stocks","stockNames","map","stock","symbol","stockValue","amount","colors","length","color","getRandomColor","newColors","push","state","labels","datasets","label","data","backgroundColor","borderWidth","cx","cy","options","plugins","legend","display","position","title","text","fontSize","letters","split","i","Math","floor","random"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,QAAM;AAAEC,IAAAA;AAAF,MAAYD,KAAlB;AACA,QAAME,UAAU,GAAGD,MAAM,CAACE,GAAP,CAAYC,KAAD,IAAWA,KAAK,CAACC,MAA5B,CAAnB;AACA,QAAMC,UAAU,GAAGL,MAAM,CAACE,GAAP,CAAYC,KAAD,IAAWA,KAAK,CAACG,MAA5B,CAAnB,CAH6B,CAI/B;;AACE,MAAIC,MAAM,GAAG,EAAb;;AAEA,SAAMA,MAAM,CAACC,MAAP,GAAgBR,MAAM,CAACQ,MAA7B,EAAqC;AAEnC,QAAIC,KAAK,GAAGC,cAAc,EAA1B;AACAC,IAAAA,SAAS,GAAG,CACR,GAAGJ,MADK,EAER;AACAE,MAAAA;AADA,KAFQ,CAAZ;AAMEF,IAAAA,MAAM,GACNA,MAAM,CAACK,IAAP,CAAYF,cAAc,EAA1B,CADA;AAEH;;AAED,QAAMG,KAAK,GAAG;AACZC,IAAAA,MAAM,EAAEb,UADI;AAEZc,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE,YADT;AAEEC,MAAAA,IAAI,EAAEZ,UAFR;AAGEa,MAAAA,eAAe,EAAEX,MAHnB;AAIEY,MAAAA,WAAW,EAAE,CAJf;AAKEC,MAAAA,EAAE,EAAE,GALN;AAMEC,MAAAA,EAAE,EAAE;AANN,KADQ;AAFE,GAAd;AAeA,QAAMC,OAAO,GAAG;AACdC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE;AACNC,QAAAA,OAAO,EAAE,IADH;AAENC,QAAAA,QAAQ,EAAE;AAFJ,OADD;AAKPC,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAE,WADD;AAELH,QAAAA,OAAO,EAAE,IAFJ;AAGLI,QAAAA,QAAQ,EAAE;AAHL;AALA;AADK,GAAhB;AAcA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE,QAAC,GAAD;AAAK,MAAA,IAAI,EAAEhB,KAAX;AAAkB,MAAA,OAAO,EAAES,OAA3B;AAAoC,MAAA,EAAE,EAAE,GAAxC;AAA6C,MAAA,EAAE,EAAE;AAAjD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;KAtDQxB,c;;AAwDT,SAASY,cAAT,GAA0B;AACtB,MAAIoB,OAAO,GAAG,mBAAmBC,KAAnB,CAAyB,EAAzB,CAAd;AACA,MAAItB,KAAK,GAAG,GAAZ;;AACA,OAAK,IAAIuB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA6B;AACzBvB,IAAAA,KAAK,IAAIqB,OAAO,CAACG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAD,CAAhB;AACH;;AACD,SAAO1B,KAAP;AACD;;AAED,eAAeX,cAAf","sourcesContent":["import React from \"react\";\nimport { Pie } from \"react-chartjs-2\";\nimport { useState } from \"react\";\n\nfunction PortfolioChart(props) {\n  const { stocks} = props;\n  const stockNames = stocks.map((stock) => stock.symbol);\n  const stockValue = stocks.map((stock) => stock.amount);\n//   const [colors, setNewColors] = useState([]);\n  let colors = [];\n\n  while(colors.length < stocks.length) {\n\n    var color = getRandomColor();\n    newColors = [\n        ...colors,\n        {\n        color\n        }\n    ]\n      colors = \n      colors.push(getRandomColor());\n  }\n  \n  const state = {\n    labels: stockNames,\n    datasets: [\n      {\n        label: \"# of votes\",\n        data: stockValue,\n        backgroundColor: colors,\n        borderWidth: 1,\n        cx: 400,\n        cy: 400\n        \n      },\n    ],\n  };\n\n  const options = {\n    plugins: {\n      legend: {\n        display: true,\n        position: \"bottom\",\n      },\n      title: {\n        text: \"Portfolio\",\n        display: true,\n        fontSize: 100,\n      },\n    },\n  };\n\n  return (\n    <div className=\"pie\">\n      <Pie data={state} options={options} cx={800} cy={800} />\n    </div>\n  );\n}\n\nfunction getRandomColor() {\n    var letters = '0123456789ABCDEF'.split('');\n    var color = '#';\n    for (var i = 0; i < 6; i++ ) {\n        color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n\n  export default PortfolioChart;"]},"metadata":{},"sourceType":"module"}