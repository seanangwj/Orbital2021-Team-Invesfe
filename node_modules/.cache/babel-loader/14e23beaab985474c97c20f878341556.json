{"ast":null,"code":"import _slicedToArray from\"/Users/seanang/invesfe-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _toConsumableArray from\"/Users/seanang/invesfe-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/seanang/invesfe-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React,{createContext,useReducer}from'react';import{v4 as uuidv4}from'uuid';// 5. The reduceer - this is used to update the state, based on the action\nimport{jsx as _jsx}from\"react/jsx-runtime\";export var AppReducer=function AppReducer(state,action){switch(action.type){case'ADD_EXPENSE':return _objectSpread(_objectSpread({},state),{},{expenses:[].concat(_toConsumableArray(state.expenses),[action.payload])});case'DELETE_EXPENSE':return _objectSpread(_objectSpread({},state),{},{expenses:state.expenses.filter(function(expense){return expense.id!==action.payload;})});case'SET_BUDGET':return _objectSpread(_objectSpread({},state),{},{budget:action.payload});default:return state;}};// 1. Sets the initial state when the app loads\nvar initialState={budget:2000,expenses:[]};// 2. Creates the context this is the thing our components import and use to get the state\nexport var AppContext=/*#__PURE__*/createContext();// 3. Provider component - wraps the components we want to give access to the state\n// Accepts the children, which are the nested(wrapped) components\nexport var AppProvider=function AppProvider(props){// 4. Sets up the app state. takes a reducer, and an initial state\nvar _useReducer=useReducer(AppReducer,initialState),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];// 5. Returns our context. Pass in the values we want to expose\nreturn/*#__PURE__*/_jsx(AppContext.Provider,{value:{expenses:state.expenses,budget:state.budget,dispatch:dispatch},children:props.children});};","map":{"version":3,"sources":["/Users/seanang/invesfe-app/src/budgetTracker/AppContext.js"],"names":["React","createContext","useReducer","v4","uuidv4","AppReducer","state","action","type","expenses","payload","filter","expense","id","budget","initialState","AppContext","AppProvider","props","dispatch","children"],"mappings":"0bAAA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,CAA+BC,UAA/B,KAAiD,OAAjD,CACA,OAASC,EAAE,GAAIC,CAAAA,MAAf,KAA6B,MAA7B,CAEA;2CACA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAAQC,MAAR,CAAmB,CAC5C,OAAQA,MAAM,CAACC,IAAf,EACC,IAAK,aAAL,CACC,sCACIF,KADJ,MAECG,QAAQ,8BAAMH,KAAK,CAACG,QAAZ,GAAsBF,MAAM,CAACG,OAA7B,EAFT,GAID,IAAK,gBAAL,CACC,sCACIJ,KADJ,MAECG,QAAQ,CAAEH,KAAK,CAACG,QAAN,CAAeE,MAAf,CACT,SAACC,OAAD,QAAaA,CAAAA,OAAO,CAACC,EAAR,GAAeN,MAAM,CAACG,OAAnC,EADS,CAFX,GAMD,IAAK,YAAL,CACC,sCACIJ,KADJ,MAECQ,MAAM,CAAEP,MAAM,CAACG,OAFhB,GAKD,QACC,MAAOJ,CAAAA,KAAP,CApBF,CAsBA,CAvBM,CAyBP;AACA,GAAMS,CAAAA,YAAY,CAAG,CACpBD,MAAM,CAAE,IADY,CAEpBL,QAAQ,CAAE,EAFU,CAArB,CAKA;AACA,MAAO,IAAMO,CAAAA,UAAU,cAAGf,aAAa,EAAhC,CAEP;AACA;AACA,MAAO,IAAMgB,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CACrC;AACA,gBAA0BhB,UAAU,CAACG,UAAD,CAAaU,YAAb,CAApC,4CAAOT,KAAP,iBAAca,QAAd,iBAEA;AACA,mBACC,KAAC,UAAD,CAAY,QAAZ,EACC,KAAK,CAAE,CACNV,QAAQ,CAAEH,KAAK,CAACG,QADV,CAENK,MAAM,CAAER,KAAK,CAACQ,MAFR,CAGNK,QAAQ,CAARA,QAHM,CADR,UAOED,KAAK,CAACE,QAPR,EADD,CAWA,CAhBM","sourcesContent":["import React, { createContext, useReducer } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\n// 5. The reduceer - this is used to update the state, based on the action\nexport const AppReducer = (state, action) => {\n\tswitch (action.type) {\n\t\tcase 'ADD_EXPENSE':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\texpenses: [...state.expenses, action.payload],\n\t\t\t};\n\t\tcase 'DELETE_EXPENSE':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\texpenses: state.expenses.filter(\n\t\t\t\t\t(expense) => expense.id !== action.payload\n\t\t\t\t),\n\t\t\t};\n\t\tcase 'SET_BUDGET':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tbudget: action.payload,\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\n// 1. Sets the initial state when the app loads\nconst initialState = {\n\tbudget: 2000,\n\texpenses: [],\n};\n\n// 2. Creates the context this is the thing our components import and use to get the state\nexport const AppContext = createContext();\n\n// 3. Provider component - wraps the components we want to give access to the state\n// Accepts the children, which are the nested(wrapped) components\nexport const AppProvider = (props) => {\n\t// 4. Sets up the app state. takes a reducer, and an initial state\n\tconst [state, dispatch] = useReducer(AppReducer, initialState);\n\n\t// 5. Returns our context. Pass in the values we want to expose\n\treturn (\n\t\t<AppContext.Provider\n\t\t\tvalue={{\n\t\t\t\texpenses: state.expenses,\n\t\t\t\tbudget: state.budget,\n\t\t\t\tdispatch,\n\t\t\t}}\n\t\t>\n\t\t\t{props.children}\n\t\t</AppContext.Provider>\n\t);\n};"]},"metadata":{},"sourceType":"module"}