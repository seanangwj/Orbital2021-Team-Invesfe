{"ast":null,"code":"import { useEffect, useReducer, useState } from \"react\";\nimport { getSymbols } from \"../actions/symbols\";\nvar Types;\n\n(function (Types) {\n  Types[\"LOADING\"] = \"loading\";\n  Types[\"SUCCESS\"] = \"success\";\n  Types[\"ERROR\"] = \"error\";\n})(Types || (Types = {}));\n\nconst initialState = {\n  isLoading: false,\n  isError: false,\n  isSuccess: false\n};\n\nconst reducer = (state, action) => {\n  switch (action) {\n    case Types.LOADING:\n      return {\n        isLoading: true,\n        isError: false,\n        isSuccess: false\n      };\n\n    case Types.SUCCESS:\n      return {\n        isLoading: false,\n        isError: false,\n        isSuccess: true\n      };\n\n    case Types.ERROR:\n      return {\n        isLoading: false,\n        isError: true,\n        isSuccess: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useSearchSymbols = (search, market) => {\n  const [symbols, setSymbols] = useState([]);\n  const [status, dispatchStatus] = useReducer(reducer, initialState);\n  const [timerId, setTimerId] = useState(); // Debounces API call to fetch symbols\n\n  useEffect(() => {\n    dispatchStatus(Types.LOADING);\n    const params = {\n      text: search,\n      hl: 1,\n      type: market\n    };\n    const newTimerId = setTimeout(() => {\n      getSymbols(params).then(symbolsResponse => {\n        setSymbols(symbolsResponse);\n        dispatchStatus(Types.SUCCESS);\n      }).catch(() => {\n        dispatchStatus(Types.ERROR);\n      });\n    }, 500);\n\n    if (timerId == null) {\n      setTimerId(newTimerId);\n    } else {\n      // Clears queued API call with new one with 500ms timeout\n      clearTimeout(timerId);\n      setTimerId(newTimerId);\n    }\n  }, [search, market]);\n  return Object.assign({\n    symbols\n  }, status);\n};","map":{"version":3,"sources":["../../src/hooks/useSearchSymbols.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,EAAoB,UAApB,EAAgC,QAAhC,QAAgD,OAAhD;AAEA,SAAS,UAAT,QAA2B,oBAA3B;AAMA,IAAK,KAAL;;AAAA,CAAA,UAAK,KAAL,EAAU;AACR,EAAA,KAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA,EAAA,KAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA,EAAA,KAAA,CAAA,OAAA,CAAA,GAAA,OAAA;AACD,CAJD,EAAK,KAAK,KAAL,KAAK,GAAA,EAAA,CAAV;;AAMA,MAAM,YAAY,GAAkB;AAClC,EAAA,SAAS,EAAE,KADuB;AAElC,EAAA,OAAO,EAAE,KAFyB;AAGlC,EAAA,SAAS,EAAE;AAHuB,CAApC;;AAMA,MAAM,OAAO,GAAG,CAAC,KAAD,EAAuB,MAAvB,KAAwC;AACtD,UAAQ,MAAR;AACE,SAAK,KAAK,CAAC,OAAX;AACE,aAAO;AACL,QAAA,SAAS,EAAE,IADN;AAEL,QAAA,OAAO,EAAE,KAFJ;AAGL,QAAA,SAAS,EAAE;AAHN,OAAP;;AAKF,SAAK,KAAK,CAAC,OAAX;AACE,aAAO;AAAE,QAAA,SAAS,EAAE,KAAb;AAAoB,QAAA,OAAO,EAAE,KAA7B;AAAoC,QAAA,SAAS,EAAE;AAA/C,OAAP;;AACF,SAAK,KAAK,CAAC,KAAX;AACE,aAAO;AAAE,QAAA,SAAS,EAAE,KAAb;AAAoB,QAAA,OAAO,EAAE,IAA7B;AAAmC,QAAA,SAAS,EAAE;AAA9C,OAAP;;AACF;AACE,aAAO,KAAP;AAZJ;AAcD,CAfD;;AAiBA,OAAO,MAAM,gBAAgB,GAAG,CAAC,MAAD,EAAiB,MAAjB,KAAwC;AACtE,QAAM,CAAC,OAAD,EAAU,UAAV,IAAwB,QAAQ,CAAe,EAAf,CAAtC;AACA,QAAM,CAAC,MAAD,EAAS,cAAT,IAA2B,UAAU,CAAC,OAAD,EAAU,YAAV,CAA3C;AACA,QAAM,CAAC,OAAD,EAAU,UAAV,IAAwB,QAAQ,EAAtC,CAHsE,CAKtE;;AACA,EAAA,SAAS,CAAC,MAAK;AACb,IAAA,cAAc,CAAC,KAAK,CAAC,OAAP,CAAd;AAEA,UAAM,MAAM,GAAsB;AAChC,MAAA,IAAI,EAAE,MAD0B;AAEhC,MAAA,EAAE,EAAE,CAF4B;AAGhC,MAAA,IAAI,EAAE;AAH0B,KAAlC;AAMA,UAAM,UAAU,GAAmB,UAAU,CAAC,MAAK;AACjD,MAAA,UAAU,CAAC,MAAD,CAAV,CACG,IADH,CACS,eAAD,IAAkC;AACtC,QAAA,UAAU,CAAC,eAAD,CAAV;AACA,QAAA,cAAc,CAAC,KAAK,CAAC,OAAP,CAAd;AACD,OAJH,EAKG,KALH,CAKS,MAAK;AACV,QAAA,cAAc,CAAC,KAAK,CAAC,KAAP,CAAd;AACD,OAPH;AAQD,KAT4C,EAS1C,GAT0C,CAA7C;;AAWA,QAAI,OAAO,IAAI,IAAf,EAAqB;AACnB,MAAA,UAAU,CAAC,UAAD,CAAV;AACD,KAFD,MAEO;AACL;AACA,MAAA,YAAY,CAAC,OAAD,CAAZ;AACA,MAAA,UAAU,CAAC,UAAD,CAAV;AACD;AACF,GA3BQ,EA2BN,CAAC,MAAD,EAAS,MAAT,CA3BM,CAAT;AA6BA,SAAA,MAAA,CAAA,MAAA,CAAA;AAAS,IAAA;AAAT,GAAA,EAAqB,MAArB,CAAA;AACD,CApCM","sourceRoot":"","sourcesContent":["import { useEffect, useReducer, useState } from \"react\";\nimport { getSymbols } from \"../actions/symbols\";\nvar Types;\n(function (Types) {\n    Types[\"LOADING\"] = \"loading\";\n    Types[\"SUCCESS\"] = \"success\";\n    Types[\"ERROR\"] = \"error\";\n})(Types || (Types = {}));\nconst initialState = {\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n};\nconst reducer = (state, action) => {\n    switch (action) {\n        case Types.LOADING:\n            return {\n                isLoading: true,\n                isError: false,\n                isSuccess: false,\n            };\n        case Types.SUCCESS:\n            return { isLoading: false, isError: false, isSuccess: true };\n        case Types.ERROR:\n            return { isLoading: false, isError: true, isSuccess: false };\n        default:\n            return state;\n    }\n};\nexport const useSearchSymbols = (search, market) => {\n    const [symbols, setSymbols] = useState([]);\n    const [status, dispatchStatus] = useReducer(reducer, initialState);\n    const [timerId, setTimerId] = useState();\n    // Debounces API call to fetch symbols\n    useEffect(() => {\n        dispatchStatus(Types.LOADING);\n        const params = {\n            text: search,\n            hl: 1,\n            type: market,\n        };\n        const newTimerId = setTimeout(() => {\n            getSymbols(params)\n                .then((symbolsResponse) => {\n                setSymbols(symbolsResponse);\n                dispatchStatus(Types.SUCCESS);\n            })\n                .catch(() => {\n                dispatchStatus(Types.ERROR);\n            });\n        }, 500);\n        if (timerId == null) {\n            setTimerId(newTimerId);\n        }\n        else {\n            // Clears queued API call with new one with 500ms timeout\n            clearTimeout(timerId);\n            setTimerId(newTimerId);\n        }\n    }, [search, market]);\n    return Object.assign({ symbols }, status);\n};\n//# sourceMappingURL=useSearchSymbols.js.map"]},"metadata":{},"sourceType":"module"}