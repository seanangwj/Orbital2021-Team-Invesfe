{"ast":null,"code":"var _jsxFileName = \"/Users/seanang/invesfe-app/src/components/CompoundGrowthCalculator.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport LineCharts from \"./Line\";\nimport LineChart from \"./LineChart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction CompoundGrowthCalculator() {\n  _s();\n\n  const [initialAmt, setNewInitialAmt] = useState(\"\");\n  const [yearlyContribution, setNewYearlyContribution] = useState(\"\");\n  const [interestRate, setNewInterestRate] = useState(\"\");\n  const [numOfYears, setNewNumOfYears] = useState(\"\");\n  const [totalValue, setNewTotalValue] = useState(\"\");\n  const [xArr, setNewXArr] = useState([0]);\n  const [yArr, setNewYArr] = useState([]);\n\n  const calculate = () => {\n    let total = initialAmt;\n    addY(total);\n\n    for (let index = 1; index <= numOfYears; index++) {\n      total *= 1 + interestRate;\n      total += parseFloat(yearlyContribution);\n      addY(total);\n      addX(index);\n    }\n\n    setNewTotalValue(Math.round(total * 100) / 100);\n  };\n\n  function addX(num) {\n    const newXArr = [...xArr, {\n      value: num\n    }];\n    setNewXArr(newXArr);\n  }\n\n  function addY(num) {\n    const newYArr = [...yArr, {\n      value: num\n    }];\n    setNewYArr(newYArr);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        height: \"40vh\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Initial Amount?\",\n          variant: \"outlined\",\n          type: \"number\",\n          onChange: e => setNewInitialAmt(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Number of Years?\",\n          variant: \"outlined\",\n          type: \"number\",\n          onChange: e => setNewNumOfYears(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Annual Interest rate?\",\n          variant: \"outlined\",\n          type: \"number\",\n          onChange: e => setNewInterestRate(e.target.value / 100)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Yearly Contribution?\",\n          variant: \"outlined\",\n          type: \"number\",\n          onChange: e => setNewYearlyContribution(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: () => {\n            calculate();\n          },\n          children: \"Calculate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\" Total Investment Value: \", totalValue, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LineCharts, {\n      xArr: xArr,\n      yArr: yArr\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CompoundGrowthCalculator, \"9ihhjsMelXDydWX7htFND2/PZ5g=\");\n\n_c = CompoundGrowthCalculator;\nexport default CompoundGrowthCalculator;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompoundGrowthCalculator\");","map":{"version":3,"sources":["/Users/seanang/invesfe-app/src/components/CompoundGrowthCalculator.js"],"names":["React","useState","TextField","Button","LineCharts","LineChart","CompoundGrowthCalculator","initialAmt","setNewInitialAmt","yearlyContribution","setNewYearlyContribution","interestRate","setNewInterestRate","numOfYears","setNewNumOfYears","totalValue","setNewTotalValue","xArr","setNewXArr","yArr","setNewYArr","calculate","total","addY","index","parseFloat","addX","Math","round","num","newXArr","value","newYArr","display","alignItems","justifyContent","height","e","target"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport LineCharts from \"./Line\";\nimport LineChart from \"./LineChart\";\n\nfunction CompoundGrowthCalculator() {\n  const [initialAmt, setNewInitialAmt] = useState(\"\");\n  const [yearlyContribution, setNewYearlyContribution] = useState(\"\");\n  const [interestRate, setNewInterestRate] = useState(\"\");\n  const [numOfYears, setNewNumOfYears] = useState(\"\");\n  const [totalValue, setNewTotalValue] = useState(\"\");\n  const [xArr, setNewXArr] = useState([0]);\n  const [yArr, setNewYArr] = useState([ ]);\n\n  const calculate = () => {\n    let total = initialAmt;\n    addY(total);\n    for (let index = 1; index <= numOfYears; index++) {\n      total *= (1 + interestRate);\n      total += parseFloat(yearlyContribution);\n      addY(total);\n      addX(index);\n    }\n    setNewTotalValue(Math.round(total * 100) / 100);\n  };\n\n  function addX(num) {\n    const newXArr = [\n      ...xArr,{\n        value: num\n      }\n    ]\n    setNewXArr(newXArr)\n  }\n\n  function addY(num) {\n    const newYArr = [\n      ...yArr,{\n        value: num\n      }\n    ]\n    setNewYArr(newYArr)\n  }\n\n\n\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          height: \"40vh\",\n        }}\n      >\n        <form>\n          <TextField\n            label=\"Initial Amount?\"\n            variant=\"outlined\"\n            type=\"number\"\n            onChange={(e) => setNewInitialAmt(e.target.value)}\n          />\n          <TextField\n            label=\"Number of Years?\"\n            variant=\"outlined\"\n            type=\"number\"\n            onChange={(e) => setNewNumOfYears(e.target.value)}\n          />\n          <TextField\n            label=\"Annual Interest rate?\"\n            variant=\"outlined\"\n            type=\"number\"\n            onChange={(e) => setNewInterestRate(e.target.value / 100)}\n          />\n           <TextField\n            label=\"Yearly Contribution?\"\n            variant=\"outlined\"\n            type=\"number\"\n            onChange={(e) => setNewYearlyContribution(e.target.value)}\n          />\n          <br />\n          <br />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              calculate();\n            }}>\n            Calculate\n          </Button>\n\n          <label> Total Investment Value: {totalValue} </label>\n\n          <br />\n          <br />\n        </form>\n      </div>\n      <LineCharts xArr={xArr} yArr ={yArr}/>\n      \n    </>\n  );\n}\n\nexport default CompoundGrowthCalculator;\n"]},"metadata":{},"sourceType":"module"}