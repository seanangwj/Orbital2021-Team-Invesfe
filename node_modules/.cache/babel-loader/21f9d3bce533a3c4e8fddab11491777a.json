{"ast":null,"code":"var _jsxFileName = \"/Users/seanang/invesfe-app/src/components/IntrinsicValue.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"../styles/Intrinsic.css\";\nimport NavBar from \"./Navbar\";\nimport { Tooltip, Icon, makeStyles } from \"@material-ui/core\";\nimport HelpOutlineIcon from \"@material-ui/icons/HelpOutline\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    margin: theme.spacing(1)\n  },\n  customWidth: {\n    width: 1500,\n    height: 100,\n    fontSize: 15\n  }\n}));\n\nfunction IntrinsicValue(props) {\n  _s();\n\n  const [netProfit, newNetProfit] = useState(\"33000\");\n  const [depAndAmort, newDepAndAmort] = useState(\"6000\");\n  const [increaseInWC, newIncreaseINWC] = useState(\"6000\");\n  const [capitalExpenditure, newCapitalExpenditure] = useState(\"15000\");\n  const [debtRepayment, newDebtRepayment] = useState(\"600\");\n  const [debtRaised, newDebtRaised] = useState(\"200\");\n  const [numOfShares, newNumOfShares] = useState(\"2000\");\n  const [rateOfReturn, newRateOfReturn] = useState(\"5\");\n  const [fcfeGrowth, newFcfeGrowth] = useState(\"15\");\n  const [intrinsicValue, newIntrinsicValue] = useState(\"0\");\n  const {\n    array\n  } = props;\n  var fcfeY1 = parseFloat(netProfit) + parseFloat(depAndAmort) - parseFloat(increaseInWC) - parseFloat(capitalExpenditure) - parseFloat(debtRepayment) + parseFloat(debtRaised);\n  const projectedFCFE = [];\n\n  const calculateIntrinsicValue = () => {\n    let iv = 0;\n\n    for (let index = 1; index <= 5; index++) {\n      iv += projectedFCFE[index - 1].value / Math.pow(1 + rateOfReturn / 100, index);\n    }\n\n    iv += projectedFCFE[4].value.toFixed(2) * (1 / (rateOfReturn / 100)) / Math.pow(1 + rateOfReturn / 100, 5);\n    newIntrinsicValue(iv);\n  };\n\n  for (let index = 1; index <= 5; index++) {\n    projectedFCFE.push({\n      label: `${index}`,\n      value: fcfeY1 * Math.pow(1 + fcfeGrowth / 100, index - 1)\n    });\n  }\n\n  const text = \"Net income after taxes (NIAT) is a financial term used to describe a company's profit after all taxes have been paid. Net income after taxes is an accounting term and is most often found in a company's quarterly and annual financial reports. Net income after taxes represents the profit or earnings after all expense have been deducted from revenue. Net income after taxes calculation can be shown as both a total dollar amount and a per-share calculation.\";\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: \"Valuation Model\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"valuation-table\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"labelBox\",\n              children: [\"Net Profit after Tax ($) : \", /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: text,\n                classes: {\n                  tooltip: classes.customWidth\n                },\n                children: /*#__PURE__*/_jsxDEV(Icon, {\n                  children: /*#__PURE__*/_jsxDEV(HelpOutlineIcon, {\n                    className: classes.icon\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 79,\n                    columnNumber: 15\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 13\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 39\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"intrinsic\",\n                type: \"number\",\n                id: \"netProfit\",\n                name: \"netProfit\",\n                value: netProfit,\n                onChange: event => newNetProfit(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"validity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"labelBox\",\n              children: [\"Depreciation and Amortisation  ($) : \", /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: text,\n                classes: {\n                  tooltip: classes.customWidth\n                },\n                children: /*#__PURE__*/_jsxDEV(Icon, {\n                  children: /*#__PURE__*/_jsxDEV(HelpOutlineIcon, {\n                    className: classes.icon\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 99,\n                    columnNumber: 15\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 13\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"intrinsic\",\n                type: \"number\",\n                id: \"depAndAmort\",\n                name: \"depAndAmort\",\n                value: depAndAmort,\n                onChange: event => newDepAndAmort(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"validity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"labelBox\",\n              children: [\"Increase in Working Capital ($) :\", /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"intrinsic\",\n                type: \"number\",\n                id: \"increaseInWC\",\n                name: \"increaseInWC\",\n                value: increaseInWC,\n                onChange: event => newIncreaseINWC(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"validity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"labelBox\",\n              children: [\"Capital Expenditure ($) :\", /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"intrinsic\",\n                type: \"number\",\n                min: \"0\",\n                id: \"capitalExpenditure\",\n                name: \"capitalExpenditure\",\n                value: capitalExpenditure,\n                onChange: event => newCapitalExpenditure(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"validity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"labelBox\",\n              children: [\"Debt Repayment on existing debt ($) :\", /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"intrinsic\",\n                type: \"number\",\n                id: \"debtRepayment\",\n                name: \"debtRepayment\",\n                min: \"0\",\n                value: debtRepayment,\n                onChange: event => newDebtRepayment(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"validity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"labelBox\",\n              children: [\"Fresh Debt Raised ($) :\", /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"intrinsic\",\n                type: \"number\",\n                id: \"debtRaised\",\n                min: \"0\",\n                name: \"debtRaised\",\n                value: debtRaised,\n                onChange: event => newDebtRaised(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"validity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"labelBox\",\n              children: [\"No. of Outstanding Shares :\", /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"intrinsic\",\n                type: \"number\",\n                id: \"numOfShares\",\n                name: \"numOfShares\",\n                min: \"1\",\n                value: numOfShares,\n                onChange: event => newNumOfShares(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"validity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"labelBox\",\n              children: [\"Required rate of return (%) :\", /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"intrinsic\",\n                type: \"number\",\n                id: \"rateOfReturn\",\n                name: \"rateOfReturn\",\n                min: \"0\",\n                value: rateOfReturn,\n                onChange: event => newRateOfReturn(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"validity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"labelBox\",\n              children: [\"FCFE Growth Rate (%) :\", /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"intrinsic\",\n                type: \"number\",\n                id: \"fcfeGrowth\",\n                name: \"fcfeGrowth\",\n                min: \"0\",\n                value: fcfeGrowth,\n                onChange: event => newFcfeGrowth(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"validity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"intrinsic-btn\",\n      onClick: () => calculateIntrinsicValue(),\n      children: \"Calculate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"value-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Year\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Projected FCFE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: projectedFCFE.map(({\n            label,\n            value\n          }) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [\"$\", value.toFixed(2), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 17\n            }, this)]\n          }, label, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelBox\",\n        children: [\"Terminal Value =\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: (projectedFCFE[4].value * (1 / (rateOfReturn / 100))).toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelBox\",\n        children: [\"Intrinsic Value For Company =\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: (intrinsicValue * 1).toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"final-labelBox\",\n        children: [\"Intrinsic Value per Share =\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: (intrinsicValue / numOfShares).toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(IntrinsicValue, \"oBj3U3zqS0uj3PNr3v9v8OWtZU0=\", false, function () {\n  return [useStyles];\n});\n\n_c = IntrinsicValue;\nexport default IntrinsicValue;\n\nvar _c;\n\n$RefreshReg$(_c, \"IntrinsicValue\");","map":{"version":3,"sources":["/Users/seanang/invesfe-app/src/components/IntrinsicValue.js"],"names":["useState","NavBar","Tooltip","Icon","makeStyles","HelpOutlineIcon","useStyles","theme","icon","margin","spacing","customWidth","width","height","fontSize","IntrinsicValue","props","netProfit","newNetProfit","depAndAmort","newDepAndAmort","increaseInWC","newIncreaseINWC","capitalExpenditure","newCapitalExpenditure","debtRepayment","newDebtRepayment","debtRaised","newDebtRaised","numOfShares","newNumOfShares","rateOfReturn","newRateOfReturn","fcfeGrowth","newFcfeGrowth","intrinsicValue","newIntrinsicValue","array","fcfeY1","parseFloat","projectedFCFE","calculateIntrinsicValue","iv","index","value","Math","pow","toFixed","push","label","text","classes","tooltip","event","target","map"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAO,yBAAP;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,OAAT,EAAkBC,IAAlB,EAAwBC,UAAxB,QAA0C,mBAA1C;AACA,OAAOC,eAAP,MAA4B,gCAA5B;;;AAEA,MAAMC,SAAS,GAAGF,UAAU,CAAEG,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd;AADJ,GADiC;AAKvCC,EAAAA,WAAW,EAAE;AACXC,IAAAA,KAAK,EAAE,IADI;AAEXC,IAAAA,MAAM,EAAE,GAFG;AAGXC,IAAAA,QAAQ,EAAE;AAHC;AAL0B,CAAZ,CAAD,CAA5B;;AAaA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAAA;;AAC7B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,OAAD,CAA1C;AACA,QAAM,CAACmB,WAAD,EAAcC,cAAd,IAAgCpB,QAAQ,CAAC,MAAD,CAA9C;AACA,QAAM,CAACqB,YAAD,EAAeC,eAAf,IAAkCtB,QAAQ,CAAC,MAAD,CAAhD;AACA,QAAM,CAACuB,kBAAD,EAAqBC,qBAArB,IAA8CxB,QAAQ,CAAC,OAAD,CAA5D;AACA,QAAM,CAACyB,aAAD,EAAgBC,gBAAhB,IAAoC1B,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAAC2B,UAAD,EAAaC,aAAb,IAA8B5B,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAAC6B,WAAD,EAAcC,cAAd,IAAgC9B,QAAQ,CAAC,MAAD,CAA9C;AACA,QAAM,CAAC+B,YAAD,EAAeC,eAAf,IAAkChC,QAAQ,CAAC,GAAD,CAAhD;AACA,QAAM,CAACiC,UAAD,EAAaC,aAAb,IAA8BlC,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACmC,cAAD,EAAiBC,iBAAjB,IAAsCpC,QAAQ,CAAC,GAAD,CAApD;AACA,QAAM;AAACqC,IAAAA;AAAD,MAAUrB,KAAhB;AACA,MAAIsB,MAAM,GACRC,UAAU,CAACtB,SAAD,CAAV,GACAsB,UAAU,CAACpB,WAAD,CADV,GAEAoB,UAAU,CAAClB,YAAD,CAFV,GAGAkB,UAAU,CAAChB,kBAAD,CAHV,GAIAgB,UAAU,CAACd,aAAD,CAJV,GAKAc,UAAU,CAACZ,UAAD,CANZ;AAQA,QAAMa,aAAa,GAAG,EAAtB;;AAEA,QAAMC,uBAAuB,GAAG,MAAM;AACpC,QAAIC,EAAE,GAAG,CAAT;;AACA,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,IAAI,CAA7B,EAAgCA,KAAK,EAArC,EAAyC;AACvCD,MAAAA,EAAE,IACAF,aAAa,CAACG,KAAK,GAAG,CAAT,CAAb,CAAyBC,KAAzB,GACAC,IAAI,CAACC,GAAL,CAAS,IAAIf,YAAY,GAAG,GAA5B,EAAiCY,KAAjC,CAFF;AAGD;;AACDD,IAAAA,EAAE,IACCF,aAAa,CAAC,CAAD,CAAb,CAAiBI,KAAjB,CAAuBG,OAAvB,CAA+B,CAA/B,KAAqC,KAAKhB,YAAY,GAAG,GAApB,CAArC,CAAD,GACAc,IAAI,CAACC,GAAL,CAAS,IAAIf,YAAY,GAAG,GAA5B,EAAiC,CAAjC,CAFF;AAGAK,IAAAA,iBAAiB,CAACM,EAAD,CAAjB;AACD,GAXD;;AAaA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,IAAI,CAA7B,EAAgCA,KAAK,EAArC,EAAyC;AACvCH,IAAAA,aAAa,CAACQ,IAAd,CAAmB;AACjBC,MAAAA,KAAK,EAAG,GAAEN,KAAM,EADC;AAEjBC,MAAAA,KAAK,EAAEN,MAAM,GAAGO,IAAI,CAACC,GAAL,CAAS,IAAIb,UAAU,GAAG,GAA1B,EAA+BU,KAAK,GAAG,CAAvC;AAFC,KAAnB;AAID;;AAED,QAAMO,IAAI,GACR,0cADF;AAEA,QAAMC,OAAO,GAAG7C,SAAS,EAAzB;AAEA,sBACE;AAAA,4BACE;AAAS,MAAA,SAAS,EAAC,QAAnB;AAAA,6BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAO,MAAA,SAAS,EAAC,iBAAjB;AAAA,6BACA;AAAA,gCACA;AAAA,kCACA;AAAA,mCACE;AAAO,cAAA,SAAS,EAAC,UAAjB;AAAA,qEAC8B,QAAC,OAAD;AAAS,gBAAA,KAAK,EAAE4C,IAAhB;AAAsB,gBAAA,OAAO,EAAE;AAAEE,kBAAAA,OAAO,EAAED,OAAO,CAACxC;AAAnB,iBAA/B;AAAA,uCAC1B,QAAC,IAAD;AAAA,yCACE,QAAC,eAAD;AAAiB,oBAAA,SAAS,EAAEwC,OAAO,CAAC3C;AAApC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAD0B;AAAA;AAAA;AAAA;AAAA,sBAD9B,eAME;AACE,gBAAA,SAAS,EAAC,WADZ;AAEE,gBAAA,IAAI,EAAC,QAFP;AAGE,gBAAA,EAAE,EAAC,WAHL;AAIE,gBAAA,IAAI,EAAC,WAJP;AAKE,gBAAA,KAAK,EAAES,SALT;AAME,gBAAA,QAAQ,EAAGoC,KAAD,IAAWnC,YAAY,CAACmC,KAAK,CAACC,MAAN,CAAaV,KAAd;AANnC;AAAA;AAAA;AAAA;AAAA,sBANF,eAeE;AAAM,gBAAA,KAAK,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,sBAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADA,eAoBE;AAAA;AAAA;AAAA;AAAA,kBApBF,eAqBE;AAAA,mCACA;AAAO,cAAA,SAAS,EAAC,UAAjB;AAAA,+EACwC,QAAC,OAAD;AAAS,gBAAA,KAAK,EAAEM,IAAhB;AAAsB,gBAAA,OAAO,EAAE;AAAEE,kBAAAA,OAAO,EAAED,OAAO,CAACxC;AAAnB,iBAA/B;AAAA,uCACpC,QAAC,IAAD;AAAA,yCACE,QAAC,eAAD;AAAiB,oBAAA,SAAS,EAAEwC,OAAO,CAAC3C;AAApC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADoC;AAAA;AAAA;AAAA;AAAA,sBADxC,eAME;AACE,gBAAA,SAAS,EAAC,WADZ;AAEE,gBAAA,IAAI,EAAC,QAFP;AAGE,gBAAA,EAAE,EAAC,aAHL;AAIE,gBAAA,IAAI,EAAC,aAJP;AAKE,gBAAA,KAAK,EAAEW,WALT;AAME,gBAAA,QAAQ,EAAGkC,KAAD,IAAWjC,cAAc,CAACiC,KAAK,CAACC,MAAN,CAAaV,KAAd;AANrC;AAAA;AAAA;AAAA;AAAA,sBANF,eAcE;AAAM,gBAAA,KAAK,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,sBAdF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,kBArBF,eAuCE;AAAA;AAAA;AAAA;AAAA,kBAvCF,eAwCE;AAAA,mCACA;AAAO,cAAA,SAAS,EAAC,UAAjB;AAAA,2EAEE;AACE,gBAAA,SAAS,EAAC,WADZ;AAEE,gBAAA,IAAI,EAAC,QAFP;AAGE,gBAAA,EAAE,EAAC,cAHL;AAIE,gBAAA,IAAI,EAAC,cAJP;AAKE,gBAAA,KAAK,EAAEvB,YALT;AAME,gBAAA,QAAQ,EAAGgC,KAAD,IAAW/B,eAAe,CAAC+B,KAAK,CAACC,MAAN,CAAaV,KAAd;AANtC;AAAA;AAAA;AAAA;AAAA,sBAFF,eAUE;AAAM,gBAAA,KAAK,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,sBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,kBAxCF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAwDE;AAAA;AAAA;AAAA;AAAA,gBAxDF,eAyDE;AAAA,kCACA;AAAA,mCACA;AAAO,cAAA,SAAS,EAAC,UAAjB;AAAA,mEAEE;AACE,gBAAA,SAAS,EAAC,WADZ;AAEE,gBAAA,IAAI,EAAC,QAFP;AAGE,gBAAA,GAAG,EAAC,GAHN;AAIE,gBAAA,EAAE,EAAC,oBAJL;AAKE,gBAAA,IAAI,EAAC,oBALP;AAME,gBAAA,KAAK,EAAErB,kBANT;AAOE,gBAAA,QAAQ,EAAG8B,KAAD,IAAW7B,qBAAqB,CAAC6B,KAAK,CAACC,MAAN,CAAaV,KAAd;AAP5C;AAAA;AAAA;AAAA;AAAA,sBAFF,eAWE;AAAM,gBAAA,KAAK,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,sBAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,kBADA,eAgBA;AAAA;AAAA;AAAA;AAAA,kBAhBA,eAiBA;AAAA,mCACA;AAAO,cAAA,SAAS,EAAC,UAAjB;AAAA,+EAEE;AACE,gBAAA,SAAS,EAAC,WADZ;AAEE,gBAAA,IAAI,EAAC,QAFP;AAGE,gBAAA,EAAE,EAAC,eAHL;AAIE,gBAAA,IAAI,EAAC,eAJP;AAKE,gBAAA,GAAG,EAAC,GALN;AAME,gBAAA,KAAK,EAAEnB,aANT;AAOE,gBAAA,QAAQ,EAAG4B,KAAD,IAAW3B,gBAAgB,CAAC2B,KAAK,CAACC,MAAN,CAAaV,KAAd;AAPvC;AAAA;AAAA;AAAA;AAAA,sBAFF,eAWE;AAAM,gBAAA,KAAK,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,sBAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,kBAjBA,eAgCA;AAAA;AAAA;AAAA;AAAA,kBAhCA,eAiCA;AAAA,mCACA;AAAO,cAAA,SAAS,EAAC,UAAjB;AAAA,iEAEE;AACE,gBAAA,SAAS,EAAC,WADZ;AAEE,gBAAA,IAAI,EAAC,QAFP;AAGE,gBAAA,EAAE,EAAC,YAHL;AAIE,gBAAA,GAAG,EAAC,GAJN;AAKE,gBAAA,IAAI,EAAC,YALP;AAME,gBAAA,KAAK,EAAEjB,UANT;AAOE,gBAAA,QAAQ,EAAG0B,KAAD,IAAWzB,aAAa,CAACyB,KAAK,CAACC,MAAN,CAAaV,KAAd;AAPpC;AAAA;AAAA;AAAA;AAAA,sBAFF,eAWE;AAAM,gBAAA,KAAK,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,sBAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,kBAjCA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAzDF,eA0GE;AAAA;AAAA;AAAA;AAAA,gBA1GF,eA2GE;AAAA,kCACA;AAAA,mCACA;AAAO,cAAA,SAAS,EAAC,UAAjB;AAAA,qEAEE;AACE,gBAAA,SAAS,EAAC,WADZ;AAEE,gBAAA,IAAI,EAAC,QAFP;AAGE,gBAAA,EAAE,EAAC,aAHL;AAIE,gBAAA,IAAI,EAAC,aAJP;AAKE,gBAAA,GAAG,EAAC,GALN;AAME,gBAAA,KAAK,EAAEf,WANT;AAOE,gBAAA,QAAQ,EAAGwB,KAAD,IAAWvB,cAAc,CAACuB,KAAK,CAACC,MAAN,CAAaV,KAAd;AAPrC;AAAA;AAAA;AAAA;AAAA,sBAFF,eAWE;AAAM,gBAAA,KAAK,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,sBAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,kBADA,eAgBA;AAAA;AAAA;AAAA;AAAA,kBAhBA,eAiBA;AAAA,mCACA;AAAO,cAAA,SAAS,EAAC,UAAjB;AAAA,uEAEE;AACE,gBAAA,SAAS,EAAC,WADZ;AAEE,gBAAA,IAAI,EAAC,QAFP;AAGE,gBAAA,EAAE,EAAC,cAHL;AAIE,gBAAA,IAAI,EAAC,cAJP;AAKE,gBAAA,GAAG,EAAC,GALN;AAME,gBAAA,KAAK,EAAEb,YANT;AAOE,gBAAA,QAAQ,EAAGsB,KAAD,IAAWrB,eAAe,CAACqB,KAAK,CAACC,MAAN,CAAaV,KAAd;AAPtC;AAAA;AAAA;AAAA;AAAA,sBAFF,eAWE;AAAM,gBAAA,KAAK,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,sBAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,kBAjBA,eAgCA;AAAA;AAAA;AAAA;AAAA,kBAhCA,eAiCA;AAAA,mCACA;AAAO,cAAA,SAAS,EAAC,UAAjB;AAAA,gEAEE;AACE,gBAAA,SAAS,EAAC,WADZ;AAEE,gBAAA,IAAI,EAAC,QAFP;AAGE,gBAAA,EAAE,EAAC,YAHL;AAIE,gBAAA,IAAI,EAAC,YAJP;AAKE,gBAAA,GAAG,EAAC,GALN;AAME,gBAAA,KAAK,EAAEX,UANT;AAOE,gBAAA,QAAQ,EAAGoB,KAAD,IAAWnB,aAAa,CAACmB,KAAK,CAACC,MAAN,CAAaV,KAAd;AAPpC;AAAA;AAAA;AAAA;AAAA,sBAFF,eAWE;AAAM,gBAAA,KAAK,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,sBAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,kBAjCA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA3GF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YALF,eAoKE;AACE,MAAA,SAAS,EAAC,eADZ;AAEE,MAAA,OAAO,EAAE,MAAMH,uBAAuB,EAFxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YApKF,eA2KE;AAAA,8BACE;AAAO,QAAA,SAAS,EAAC,aAAjB;AAAA,gCACE;AAAA,iCACE;AAAA,oCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE;AAAA,oBACGD,aAAa,CAACe,GAAd,CAAkB,CAAC;AAAEN,YAAAA,KAAF;AAASL,YAAAA;AAAT,WAAD,kBACjB;AAAA,oCACE;AAAA,wBAAKK;AAAL;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA,8BAAML,KAAK,CAACG,OAAN,CAAc,CAAd,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA,aAASE,KAAT;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAiBE;AAAA;AAAA;AAAA;AAAA,cAjBF,eAkBE;AAAO,QAAA,SAAS,EAAC,UAAjB;AAAA,oDAEE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,KAAK,EAAE,CACLT,aAAa,CAAC,CAAD,CAAb,CAAiBI,KAAjB,IACC,KAAKb,YAAY,GAAG,GAApB,CADD,CADK,EAGLgB,OAHK,CAGG,CAHH;AAFT;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBF,eA4BE;AAAA;AAAA;AAAA;AAAA,cA5BF,eA6BE;AAAO,QAAA,SAAS,EAAC,UAAjB;AAAA,iEAEE;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,KAAK,EAAE,CAACZ,cAAc,GAAG,CAAlB,EAAqBY,OAArB,CAA6B,CAA7B;AAA5B;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cA7BF,eAiCE;AAAA;AAAA;AAAA;AAAA,cAjCF,eAkCE;AAAO,QAAA,SAAS,EAAC,gBAAjB;AAAA,+DAEE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,KAAK,EAAE,CAACZ,cAAc,GAAGN,WAAlB,EAA+BkB,OAA/B,CAAuC,CAAvC;AAFT;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAlCF;AAAA;AAAA;AAAA;AAAA;AAAA,YA3KF;AAAA,kBADF;AAwND;;GAtQQhC,c;UA4CST,S;;;KA5CTS,c;AAwQT,eAAeA,cAAf","sourcesContent":["import { useState } from \"react\";\nimport \"../styles/Intrinsic.css\";\nimport NavBar from \"./Navbar\";\nimport { Tooltip, Icon, makeStyles } from \"@material-ui/core\";\nimport HelpOutlineIcon from \"@material-ui/icons/HelpOutline\";\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    margin: theme.spacing(1),\n  },\n\n  customWidth: {\n    width: 1500,\n    height: 100,\n    fontSize: 15,\n  },\n\n}));\n\nfunction IntrinsicValue(props) {\n  const [netProfit, newNetProfit] = useState(\"33000\");\n  const [depAndAmort, newDepAndAmort] = useState(\"6000\");\n  const [increaseInWC, newIncreaseINWC] = useState(\"6000\");\n  const [capitalExpenditure, newCapitalExpenditure] = useState(\"15000\");\n  const [debtRepayment, newDebtRepayment] = useState(\"600\");\n  const [debtRaised, newDebtRaised] = useState(\"200\");\n  const [numOfShares, newNumOfShares] = useState(\"2000\");\n  const [rateOfReturn, newRateOfReturn] = useState(\"5\");\n  const [fcfeGrowth, newFcfeGrowth] = useState(\"15\");\n  const [intrinsicValue, newIntrinsicValue] = useState(\"0\");\n  const {array} = props;\n  var fcfeY1 =\n    parseFloat(netProfit) +\n    parseFloat(depAndAmort) -\n    parseFloat(increaseInWC) -\n    parseFloat(capitalExpenditure) -\n    parseFloat(debtRepayment) +\n    parseFloat(debtRaised);\n\n  const projectedFCFE = [];\n\n  const calculateIntrinsicValue = () => {\n    let iv = 0;\n    for (let index = 1; index <= 5; index++) {\n      iv +=\n        projectedFCFE[index - 1].value /\n        Math.pow(1 + rateOfReturn / 100, index);\n    }\n    iv +=\n      (projectedFCFE[4].value.toFixed(2) * (1 / (rateOfReturn / 100))) /\n      Math.pow(1 + rateOfReturn / 100, 5);\n    newIntrinsicValue(iv);\n  };\n\n  for (let index = 1; index <= 5; index++) {\n    projectedFCFE.push({\n      label: `${index}`,\n      value: fcfeY1 * Math.pow(1 + fcfeGrowth / 100, index - 1),\n    });\n  }\n\n  const text =\n    \"Net income after taxes (NIAT) is a financial term used to describe a company's profit after all taxes have been paid. Net income after taxes is an accounting term and is most often found in a company's quarterly and annual financial reports. Net income after taxes represents the profit or earnings after all expense have been deducted from revenue. Net income after taxes calculation can be shown as both a total dollar amount and a per-share calculation.\";\n  const classes = useStyles();\n\n  return (\n    <>\n      <section className=\"header\">\n        <NavBar />\n      </section>\n      <div className=\"title\">Valuation Model</div>\n      <table className=\"valuation-table\">\n      <tbody>\n      <tr>\n      <td>\n        <label className=\"labelBox\">\n          Net Profit after Tax ($) : {<Tooltip title={text} classes={{ tooltip: classes.customWidth }}>\n            <Icon >\n              <HelpOutlineIcon className={classes.icon} />\n            </Icon>\n          </Tooltip>}\n          <input\n            className=\"intrinsic\"\n            type=\"number\"\n            id=\"netProfit\"\n            name=\"netProfit\"\n            value={netProfit}\n            onChange={(event) => newNetProfit(event.target.value)}\n          />\n          \n          <span class=\"validity\"></span>\n        </label>\n        </td>\n        <br></br>\n        <td>\n        <label className=\"labelBox\">\n          Depreciation and Amortisation  ($) : {<Tooltip title={text} classes={{ tooltip: classes.customWidth }}>\n            <Icon >\n              <HelpOutlineIcon className={classes.icon} />\n            </Icon>\n          </Tooltip>}\n          <input\n            className=\"intrinsic\"\n            type=\"number\"\n            id=\"depAndAmort\"\n            name=\"depAndAmort\"\n            value={depAndAmort}\n            onChange={(event) => newDepAndAmort(event.target.value)}\n          />\n          <span class=\"validity\"></span>\n        </label>\n        </td>\n        <br></br>\n        <td>\n        <label className=\"labelBox\">\n          Increase in Working Capital ($) :\n          <input\n            className=\"intrinsic\"\n            type=\"number\"\n            id=\"increaseInWC\"\n            name=\"increaseInWC\"\n            value={increaseInWC}\n            onChange={(event) => newIncreaseINWC(event.target.value)}\n          />\n          <span class=\"validity\"></span>\n        </label>\n        </td>\n        </tr>\n        <br></br>\n        <tr>\n        <td>\n        <label className=\"labelBox\">\n          Capital Expenditure ($) :\n          <input\n            className=\"intrinsic\"\n            type=\"number\"\n            min=\"0\"\n            id=\"capitalExpenditure\"\n            name=\"capitalExpenditure\"\n            value={capitalExpenditure}\n            onChange={(event) => newCapitalExpenditure(event.target.value)}\n          />\n          <span class=\"validity\"></span>\n        </label>\n        </td>\n        <br></br>\n        <td>\n        <label className=\"labelBox\">\n          Debt Repayment on existing debt ($) :\n          <input\n            className=\"intrinsic\"\n            type=\"number\"\n            id=\"debtRepayment\"\n            name=\"debtRepayment\"\n            min=\"0\"\n            value={debtRepayment}\n            onChange={(event) => newDebtRepayment(event.target.value)}\n          />\n          <span class=\"validity\"></span>\n        </label>\n        </td>\n        <br></br>\n        <td>\n        <label className=\"labelBox\">\n          Fresh Debt Raised ($) :\n          <input\n            className=\"intrinsic\"\n            type=\"number\"\n            id=\"debtRaised\"\n            min=\"0\"\n            name=\"debtRaised\"\n            value={debtRaised}\n            onChange={(event) => newDebtRaised(event.target.value)}\n          />\n          <span class=\"validity\"></span>\n        </label>\n        </td>\n        </tr>\n        <br></br>\n        <tr>\n        <td>\n        <label className=\"labelBox\">\n          No. of Outstanding Shares :\n          <input\n            className=\"intrinsic\"\n            type=\"number\"\n            id=\"numOfShares\"\n            name=\"numOfShares\"\n            min=\"1\"\n            value={numOfShares}\n            onChange={(event) => newNumOfShares(event.target.value)}\n          />\n          <span class=\"validity\"></span>\n        </label>\n        </td>\n        <br></br>\n        <td>\n        <label className=\"labelBox\">\n          Required rate of return (%) :\n          <input\n            className=\"intrinsic\"\n            type=\"number\"\n            id=\"rateOfReturn\"\n            name=\"rateOfReturn\"\n            min=\"0\"\n            value={rateOfReturn}\n            onChange={(event) => newRateOfReturn(event.target.value)}\n          />\n          <span class=\"validity\"></span>\n        </label>\n        </td>\n        <br></br>\n        <td>\n        <label className=\"labelBox\">\n          FCFE Growth Rate (%) :\n          <input\n            className=\"intrinsic\"\n            type=\"number\"\n            id=\"fcfeGrowth\"\n            name=\"fcfeGrowth\"\n            min=\"0\"\n            value={fcfeGrowth}\n            onChange={(event) => newFcfeGrowth(event.target.value)}\n          />\n          <span class=\"validity\"></span>\n        </label>\n        </td>\n        </tr>\n      </tbody>\n      </table>\n      <button\n        className=\"intrinsic-btn\"\n        onClick={() => calculateIntrinsicValue()}\n      >\n        Calculate\n      </button>\n\n      <div>\n        <table className=\"value-table\">\n          <thead>\n            <tr>\n              <th>Year</th>\n              <th>Projected FCFE</th>\n            </tr>\n          </thead>\n          <tbody>\n            {projectedFCFE.map(({ label, value }) => (\n              <tr key={label}>\n                <td>{label}</td>\n                <td>${value.toFixed(2)} </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <br></br>\n        <label className=\"labelBox\">\n          Terminal Value =\n          <input\n            type=\"number\"\n            value={(\n              projectedFCFE[4].value *\n              (1 / (rateOfReturn / 100))\n            ).toFixed(2)}\n          />\n        </label>\n        <br></br>\n        <label className=\"labelBox\">\n          Intrinsic Value For Company =\n          <input type=\"number\" value={(intrinsicValue * 1).toFixed(2)} />\n        </label>\n        <br></br>\n        <label className=\"final-labelBox\">\n          Intrinsic Value per Share =\n          <input\n            type=\"number\"\n            value={(intrinsicValue / numOfShares).toFixed(2)}\n          />\n        </label>\n      </div>\n    </>\n  );\n}\n\nexport default IntrinsicValue;\n"]},"metadata":{},"sourceType":"module"}