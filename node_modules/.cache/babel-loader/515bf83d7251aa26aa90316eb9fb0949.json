{"ast":null,"code":"import React from \"react\";\nimport { useState } from \"react\";\nimport styled from \"styled-components\";\nimport DraggableWrapper from \"./DraggableWrapper\";\nimport Search from \"../components/Search\";\nimport Markets from \"../components/Markets\";\nimport { MarketTypes } from \"../types/markets\";\nimport { useSearchSymbols } from \"../hooks/useSearchSymbols\";\nimport Selector from \"../components/Selector\";\nimport SkeletonLoading from \"../components/Loading/SkeletonLoading\";\nexport const TickerSymbolSearch = props => {\n  const [query, setQuery] = useState({\n    search: \"\",\n    market: MarketTypes.ALL\n  });\n  const {\n    symbols,\n    isSuccess,\n    isLoading,\n    isError\n  } = useSearchSymbols(query.search, query.market);\n\n  const updateSearchInput = newSearch => {\n    setQuery(prevQuery => Object.assign(Object.assign({}, prevQuery), {\n      search: newSearch\n    }));\n  };\n\n  const updateMarket = newMarket => {\n    setQuery(prevQuery => Object.assign(Object.assign({}, prevQuery), {\n      market: newMarket\n    }));\n  };\n\n  return React.createElement(DraggableWrapper, {\n    theme: props.theme\n  }, React.createElement(Wrapper, null, React.createElement(Search, {\n    search: query.search,\n    setSearch: updateSearchInput\n  }), query.search.length !== 0 && React.createElement(\"div\", null, React.createElement(Markets, {\n    markets: Object.values(MarketTypes),\n    selectedMarket: query.market,\n    updateMarket: updateMarket\n  }), React.createElement(Body, null, isLoading && React.createElement(SkeletonLoading, null), isSuccess && React.createElement(Selector, {\n    symbols: symbols,\n    callback: props.callback\n  }), isSuccess && symbols.length === 0 && React.createElement(Text, null, \"No symbols found...\"), isError && React.createElement(Text, null, \"There was an error fetching symbols...\")))));\n};\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  background: ${({\n  theme\n}) => theme.paper.background};\n  backdrop-filter: blur(20px);\n  border-radius: 10px;\n  width: 100%;\n`;\nconst Body = styled.div`\n  margin: 0px 20px 0px 20px;\n  padding-bottom: 20px;\n`;\nconst Text = styled.p`\n  color: ${({\n  theme\n}) => theme.paper.color};\n`;","map":{"version":3,"sources":["../../src/container/TickerSymbolSearch.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport styled from \"styled-components\";\nimport DraggableWrapper from \"./DraggableWrapper\";\nimport Search from \"../components/Search\";\nimport Markets from \"../components/Markets\";\nimport { MarketTypes } from \"../types/markets\";\nimport { useSearchSymbols } from \"../hooks/useSearchSymbols\";\nimport Selector from \"../components/Selector\";\nimport SkeletonLoading from \"../components/Loading/SkeletonLoading\";\nexport const TickerSymbolSearch = (props) => {\n    const [query, setQuery] = useState({\n        search: \"\",\n        market: MarketTypes.ALL,\n    });\n    const { symbols, isSuccess, isLoading, isError } = useSearchSymbols(query.search, query.market);\n    const updateSearchInput = (newSearch) => {\n        setQuery((prevQuery) => (Object.assign(Object.assign({}, prevQuery), { search: newSearch })));\n    };\n    const updateMarket = (newMarket) => {\n        setQuery((prevQuery) => (Object.assign(Object.assign({}, prevQuery), { market: newMarket })));\n    };\n    return (React.createElement(DraggableWrapper, { theme: props.theme },\n        React.createElement(Wrapper, null,\n            React.createElement(Search, { search: query.search, setSearch: updateSearchInput }),\n            query.search.length !== 0 && (React.createElement(\"div\", null,\n                React.createElement(Markets, { markets: Object.values(MarketTypes), selectedMarket: query.market, updateMarket: updateMarket }),\n                React.createElement(Body, null,\n                    isLoading && React.createElement(SkeletonLoading, null),\n                    isSuccess && (React.createElement(Selector, { symbols: symbols, callback: props.callback })),\n                    isSuccess && symbols.length === 0 && (React.createElement(Text, null, \"No symbols found...\")),\n                    isError && React.createElement(Text, null, \"There was an error fetching symbols...\")))))));\n};\nconst Wrapper = styled.div `\n  display: flex;\n  flex-direction: column;\n  background: ${({ theme }) => theme.paper.background};\n  backdrop-filter: blur(20px);\n  border-radius: 10px;\n  width: 100%;\n`;\nconst Body = styled.div `\n  margin: 0px 20px 0px 20px;\n  padding-bottom: 20px;\n`;\nconst Text = styled.p `\n  color: ${({ theme }) => theme.paper.color};\n`;\n//# sourceMappingURL=TickerSymbolSearch.js.map"]},"metadata":{},"sourceType":"module"}