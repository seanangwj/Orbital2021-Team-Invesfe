{"ast":null,"code":"var _jsxFileName = \"/Users/seanang/Orbital2021-Team-Invesfe/src/budgetTracker/AppContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useReducer, useContext, useState, useEffect } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { db, fire } from \"../config/Firebase.js\";\nimport { UserContext } from \"../components/UserContext\";\nimport { StarRate } from \"@material-ui/icons\"; // 5. The reduceer - this is used to update the state, based on the action\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppReducer = (state, action) => {\n  _s();\n\n  const currentUser = useContext(UserContext);\n\n  const updateVariables = variables => {\n    if (currentUser != null) {\n      db.child(\"users\").child(currentUser.uid).child(\"budget\").child(\"budgettracker\").child(\"expenseTotal\").set(variables);\n    }\n  };\n\n  let newVariables = [];\n\n  switch (action.type) {\n    case \"ADD_EXPENSE\":\n      newVariables = { ...state,\n        expenses: [...state.expenses, action.payload]\n      };\n      updateVariables(newVariables);\n      return newVariables;\n\n    case \"DELETE_EXPENSE\":\n      newVariables = { ...state,\n        expenses: state.expenses.filter(expense => expense.id !== action.payload)\n      };\n      updateVariables(newVariables);\n      return newVariables;\n\n    case \"SET_BUDGET\":\n      newVariables = { ...state,\n        budget: action.payload\n      };\n      updateVariables(newVariables);\n      return newVariables;\n\n    default:\n      return state;\n  }\n}; // 1. Sets the initial state when the app loads\n// const [initialState, setState] = useState({\n// \texpenses: [],\n// });\n// 2. Creates the context this is the thing our components import and use to get the state\n\n_s(AppReducer, \"fR8wccA8kuOmI8tLX/QG90sBSlk=\");\n\n_c = AppReducer;\nexport const AppContext = /*#__PURE__*/createContext(); // 3. Provider component - wraps the components we want to give access to the state\n// Accepts the children, which are the nested(wrapped) components\n\nexport const AppProvider = props => {\n  _s2();\n\n  const [initialState, setState] = useState({\n    expenses: []\n  });\n  const currentUser = useContext(UserContext); // 4. Sets up the app state. takes a reducer, and an initial state\n\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  const handleReset = () => {\n    if (window.confirm(\"Are you sure to reset?\")) {\n      //   setState([]);\n      if (currentUser != null) {\n        db.child(\"users\").child(currentUser.uid).child(\"budget\").child(\"budgettracker\").child(\"expenseTotal\").set([]);\n      }\n    }\n  }; // 5. Returns our context. Pass in the values we want to expose\n\n\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      expenses: state.expenses,\n      dispatch\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(AppProvider, \"7stfY9HnWf91wHnN1ziY+XKIuLI=\");\n\n_c2 = AppProvider;\nexport const handleReset = () => {\n  if (window.confirm(\"Are you sure to reset?\")) {\n    //   setState([]);\n    if (currentUser != null) {\n      db.child(\"users\").child(currentUser.uid).child(\"budget\").child(\"budgettracker\").child(\"expenseTotal\").set([]);\n    }\n  }\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AppReducer\");\n$RefreshReg$(_c2, \"AppProvider\");","map":{"version":3,"sources":["/Users/seanang/Orbital2021-Team-Invesfe/src/budgetTracker/AppContext.js"],"names":["React","createContext","useReducer","useContext","useState","useEffect","v4","uuidv4","db","fire","UserContext","StarRate","AppReducer","state","action","currentUser","updateVariables","variables","child","uid","set","newVariables","type","expenses","payload","filter","expense","id","budget","AppContext","AppProvider","props","initialState","setState","dispatch","handleReset","window","confirm","children"],"mappings":"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","sourcesContent":["import React, {\n  createContext,\n  useReducer,\n  useContext,\n  useState,\n  useEffect,\n} from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { db, fire } from \"../config/Firebase.js\";\nimport { UserContext } from \"../components/UserContext\";\nimport { StarRate } from \"@material-ui/icons\";\n\n// 5. The reduceer - this is used to update the state, based on the action\nexport const AppReducer = (state, action) => {\n  const currentUser = useContext(UserContext);\n\n  const updateVariables = (variables) => {\n    if (currentUser != null) {\n      db.child(\"users\")\n        .child(currentUser.uid)\n        .child(\"budget\")\n        .child(\"budgettracker\")\n        .child(\"expenseTotal\")\n        .set(variables);\n    }\n  };\n  let newVariables = [];\n  switch (action.type) {\n    case \"ADD_EXPENSE\":\n      newVariables = {\n        ...state,\n        expenses: [...state.expenses, action.payload],\n      };\n      updateVariables(newVariables);\n      return newVariables;\n\n    case \"DELETE_EXPENSE\":\n      newVariables = {\n        ...state,\n        expenses: state.expenses.filter(\n          (expense) => expense.id !== action.payload\n        ),\n      };\n      updateVariables(newVariables);\n      return newVariables;\n    case \"SET_BUDGET\":\n      newVariables = {\n        ...state,\n        budget: action.payload,\n      };\n      updateVariables(newVariables);\n      return newVariables;\n\n    default:\n      return state;\n  }\n};\n\n// 1. Sets the initial state when the app loads\n\n// const [initialState, setState] = useState({\n// \texpenses: [],\n// });\n\n// 2. Creates the context this is the thing our components import and use to get the state\nexport const AppContext = createContext();\n\n// 3. Provider component - wraps the components we want to give access to the state\n// Accepts the children, which are the nested(wrapped) components\nexport const AppProvider = (props) => {\n  const [initialState, setState] = useState({\n    expenses: [],\n  });\n\n  const currentUser = useContext(UserContext);\n\n  // 4. Sets up the app state. takes a reducer, and an initial state\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  const handleReset = () => {\n    if (window.confirm(\"Are you sure to reset?\")) {\n    //   setState([]);\n      if (currentUser != null) {\n        db.child(\"users\")\n          .child(currentUser.uid)\n          .child(\"budget\")\n          .child(\"budgettracker\")\n          .child(\"expenseTotal\")\n          .set([]);\n      }\n    }\n  };\n\n  // 5. Returns our context. Pass in the values we want to expose\n  return (\n    <AppContext.Provider\n      value={{\n        expenses: state.expenses,\n        dispatch,\n      }}\n    >\n      {props.children}\n    </AppContext.Provider>\n  );\n};\n export const handleReset = () => {\n\t \n    if (window.confirm(\"Are you sure to reset?\")) {\n    //   setState([]);\n      if (currentUser != null) {\n        db.child(\"users\")\n          .child(currentUser.uid)\n          .child(\"budget\")\n          .child(\"budgettracker\")\n          .child(\"expenseTotal\")\n          .set([]);\n      }\n    }\n  };"]},"metadata":{},"sourceType":"module"}