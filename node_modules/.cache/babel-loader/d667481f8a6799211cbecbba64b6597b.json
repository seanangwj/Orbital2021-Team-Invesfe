{"ast":null,"code":"var _jsxFileName = \"/Users/seanang/invesfe-app/src/components/IntrinsicValue.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction IntrinsicValue() {\n  _s();\n\n  const [netProfit, newNetProfit] = useState(\"0\");\n  const [depAndAmort, newDepAndAmort] = useState(\"0\");\n  const [increaseInWC, newIncreaseINWC] = useState(\"0\");\n  const [capitalExpenditure, newCapitalExpenditure] = useState(\"0\");\n  const [debtRepayment, newDebtRepayment] = useState(\"0\");\n  const [debtRaised, newDebtRaised] = useState(\"0\");\n  const [numOfShares, newNumOfShares] = useState(\"0\");\n  const [rateOfReturn, newRateOfReturn] = useState(\"0\");\n  const [fcfeGrowth, newFcfeGrowth] = useState(\"0\");\n  var fcfeY1 = parseFloat(netProfit) + parseFloat(depAndAmort) - parseFloat(increaseInWC) - parseFloat(capitalExpenditure) - parseFloat(debtRepayment) + parseFloat(debtRaised);\n  const projectedFCFE = [];\n\n  const calculateIntrinsicValue = () => {\n    let intrinsicValue = 0;\n\n    for (let index = 1; index <= 5; index++) {\n      intrinsicValue += (projectedFCFE[index] / Math.pow(1 + rateOfReturn / 100), index);\n    }\n\n    return intrinsicValue;\n  };\n\n  for (let index = 1; index <= 5; index++) {\n    projectedFCFE.push({\n      label: `${index}`,\n      value: fcfeY1 * Math.pow(1 + fcfeGrowth / 100, index - 1)\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Net Profit after Tax ($)\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"netProfit\",\n          name: \"netProfit\",\n          value: netProfit,\n          onChange: event => newNetProfit(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Depreciation and Amortisation\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"depAndAmort\",\n          name: \"depAndAmort\",\n          value: depAndAmort,\n          onChange: event => newDepAndAmort(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Increase in Working Capital\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"increaseInWC\",\n          name: \"increaseInWC\",\n          value: increaseInWC,\n          onChange: event => newIncreaseINWC(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Capital Expenditure ($)\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"capitalExpenditure\",\n          name: \"capitalExpenditure\",\n          value: capitalExpenditure,\n          onChange: event => newCapitalExpenditure(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Debt Repayment on existing debt ($)\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"debtRepayment\",\n          name: \"debtRepayment\",\n          value: debtRepayment,\n          onChange: event => newDebtRepayment(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Fresh Debt Raised ($)\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"debtRaised\",\n          name: \"debtRaised\",\n          value: debtRaised,\n          onChange: event => newDebtRaised(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"No. of Outstanding Shares\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"numOfShares\",\n          name: \"numOfShares\",\n          value: numOfShares,\n          onChange: event => newNumOfShares(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Required rate of return (%)\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"rateOfReturn\",\n          name: \"rateOfReturn\",\n          value: rateOfReturn,\n          onChange: event => newRateOfReturn(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"FCFE Growth Rate (%)\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"fcfeGrowth\",\n          name: \"fcfeGrowth\",\n          value: fcfeGrowth,\n          onChange: event => newFcfeGrowth(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"FCFE Y1\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: fcfeY1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\",\n              children: \"Year\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\",\n              children: \"Projected FCFE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: projectedFCFE.map(({\n            label,\n            value\n          }) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [\"$\", value.toFixed(2), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 15\n            }, this)]\n          }, label, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Terminal Value\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: projectedFCFE[4].value.toFixed(2) * (1 / (rateOfReturn / 100))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Intrinsic Value For Company\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: calculateIntrinsicValue()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Intrinsic Value per Share\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: calculateIntrinsicValue() / numOfShares\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(IntrinsicValue, \"u9KA0hNhhmmoOIiqmSuVi2eCeZ4=\");\n\n_c = IntrinsicValue;\nexport default IntrinsicValue;\n\nvar _c;\n\n$RefreshReg$(_c, \"IntrinsicValue\");","map":{"version":3,"sources":["/Users/seanang/invesfe-app/src/components/IntrinsicValue.js"],"names":["useState","IntrinsicValue","netProfit","newNetProfit","depAndAmort","newDepAndAmort","increaseInWC","newIncreaseINWC","capitalExpenditure","newCapitalExpenditure","debtRepayment","newDebtRepayment","debtRaised","newDebtRaised","numOfShares","newNumOfShares","rateOfReturn","newRateOfReturn","fcfeGrowth","newFcfeGrowth","fcfeY1","parseFloat","projectedFCFE","calculateIntrinsicValue","intrinsicValue","index","Math","pow","push","label","value","event","target","map","toFixed"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\n\nfunction IntrinsicValue() {\n  const [netProfit, newNetProfit] = useState(\"0\");\n  const [depAndAmort, newDepAndAmort] = useState(\"0\");\n  const [increaseInWC, newIncreaseINWC] = useState(\"0\");\n  const [capitalExpenditure, newCapitalExpenditure] = useState(\"0\");\n  const [debtRepayment, newDebtRepayment] = useState(\"0\");\n  const [debtRaised, newDebtRaised] = useState(\"0\");\n  const [numOfShares, newNumOfShares] = useState(\"0\");\n  const [rateOfReturn, newRateOfReturn] = useState(\"0\");\n  const [fcfeGrowth, newFcfeGrowth] = useState(\"0\");\n  var fcfeY1 =\n    parseFloat(netProfit) +\n    parseFloat(depAndAmort) -\n    parseFloat(increaseInWC) -\n    parseFloat(capitalExpenditure) -\n    parseFloat(debtRepayment) +\n    parseFloat(debtRaised);\n  const projectedFCFE = [];\n\n  const calculateIntrinsicValue = () => {\n    let intrinsicValue = 0;\n    for (let index = 1; index <= 5; index++) {\n      intrinsicValue +=\n        (projectedFCFE[index] / Math.pow(1 + rateOfReturn / 100), index);\n    }\n    return intrinsicValue;\n  };\n\n  for (let index = 1; index <= 5; index++) {\n    projectedFCFE.push({\n      label: `${index}`,\n      value: fcfeY1 * Math.pow(1 + fcfeGrowth / 100, index - 1),\n    });\n  }\n\n  return (\n      <>\n    <div> \n      <label>\n        Net Profit after Tax ($)\n        <input\n          type=\"number\"\n          id=\"netProfit\"\n          name=\"netProfit\"\n          value={netProfit}\n          onChange={(event) => newNetProfit(event.target.value)}\n        />\n      </label>\n      <label>\n        Depreciation and Amortisation\n        <input\n          type=\"number\"\n          id=\"depAndAmort\"\n          name=\"depAndAmort\"\n          value={depAndAmort}\n          onChange={(event) => newDepAndAmort(event.target.value)}\n        />\n      </label>\n      <label>\n        Increase in Working Capital\n        <input\n          type=\"number\"\n          id=\"increaseInWC\"\n          name=\"increaseInWC\"\n          value={increaseInWC}\n          onChange={(event) => newIncreaseINWC(event.target.value)}\n        />\n      </label>\n      <label>\n        Capital Expenditure ($)\n        <input\n          type=\"number\"\n          id=\"capitalExpenditure\"\n          name=\"capitalExpenditure\"\n          value={capitalExpenditure}\n          onChange={(event) => newCapitalExpenditure(event.target.value)}\n        />\n      </label>\n      <label>\n        Debt Repayment on existing debt ($)\n        <input\n          type=\"number\"\n          id=\"debtRepayment\"\n          name=\"debtRepayment\"\n          value={debtRepayment}\n          onChange={(event) => newDebtRepayment(event.target.value)}\n        />\n      </label>\n      <label>\n        Fresh Debt Raised ($)\n        <input\n          type=\"number\"\n          id=\"debtRaised\"\n          name=\"debtRaised\"\n          value={debtRaised}\n          onChange={(event) => newDebtRaised(event.target.value)}\n        />\n      </label>\n      <label>\n        No. of Outstanding Shares\n        <input\n          type=\"number\"\n          id=\"numOfShares\"\n          name=\"numOfShares\"\n          value={numOfShares}\n          onChange={(event) => newNumOfShares(event.target.value)}\n        />\n      </label>\n      <label>\n        Required rate of return (%)\n        <input\n          type=\"number\"\n          id=\"rateOfReturn\"\n          name=\"rateOfReturn\"\n          value={rateOfReturn}\n          onChange={(event) => newRateOfReturn(event.target.value)}\n        />\n      </label>\n      <label>\n        FCFE Growth Rate (%)\n        <input\n          type=\"number\"\n          id=\"fcfeGrowth\"\n          name=\"fcfeGrowth\"\n          value={fcfeGrowth}\n          onChange={(event) => newFcfeGrowth(event.target.value)}\n        />\n      </label>\n\n      <label>\n        FCFE Y1\n        <input type=\"number\" value={fcfeY1} />\n      </label>\n      </div>\n      <div>\n      <table>\n        <thead>\n          <tr>\n            <th scope=\"col\">Year</th>\n            <th scope=\"col\">Projected FCFE</th>\n          </tr>\n        </thead>\n        <tbody>\n          {projectedFCFE.map(({ label, value }) => (\n            <tr key={label}>\n              <td>{label}</td>\n              <td>${value.toFixed(2)} </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <label>\n        Terminal Value\n        <input\n          type=\"number\"\n          value= {projectedFCFE[4].value.toFixed(2) * (1 / (rateOfReturn / 100))}\n        />\n      </label>\n      <label>\n        Intrinsic Value For Company\n        <input type=\"number\" value={calculateIntrinsicValue()} />\n      </label>\n      <label>\n        Intrinsic Value per Share\n        <input type=\"number\" value={calculateIntrinsicValue() / numOfShares} />\n      </label>\n    </div>\n    </>\n  );\n}\n\nexport default IntrinsicValue;\n"]},"metadata":{},"sourceType":"module"}