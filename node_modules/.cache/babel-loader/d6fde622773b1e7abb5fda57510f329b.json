{"ast":null,"code":"var _jsxFileName = \"/Users/seanang/Orbital2021-Team-Invesfe/src/budgetTracker/AppContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer, useContext, useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { db, fire } from \"../config/Firebase.js\";\nimport { UserContext } from \"../components/UserContext\";\nimport { StarRate } from '@material-ui/icons'; // 5. The reduceer - this is used to update the state, based on the action\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppReducer = (state, action) => {\n  const updateVariables = v;\n\n  if (currentUser != null) {\n    db.child(\"users\").child(currentUser.uid).child(\"budget\").child(\"budgettracker\").child(\"expenseTotal\").set(state);\n  }\n\n  let newVariables = [];\n\n  switch (action.type) {\n    case 'ADD_EXPENSE':\n      newVariables = { ...state,\n        expenses: [...state.expenses, action.payload]\n      };\n      updateVariables(newVariables);\n      return newVariables;\n\n    case 'DELETE_EXPENSE':\n      newVariables = { ...state,\n        expenses: state.expenses.filter(expense => expense.id !== action.payload)\n      };\n      return newVariables;\n\n    case 'SET_BUDGET':\n      newVariables = { ...state,\n        budget: action.payload\n      };\n      return newVariables;\n\n    default:\n      return state;\n  }\n}; // 1. Sets the initial state when the app loads\n// const [initialState, setState] = useState({\n// \texpenses: [],\n// });\n// 2. Creates the context this is the thing our components import and use to get the state\n\n_c = AppReducer;\nexport const AppContext = /*#__PURE__*/createContext(); // 3. Provider component - wraps the components we want to give access to the state\n// Accepts the children, which are the nested(wrapped) components\n\nexport const AppProvider = props => {\n  _s();\n\n  const [initialState, setState] = useState({\n    expenses: []\n  });\n  const currentUser = useContext(UserContext); // const [newState, setState] = useState();\n  // useEffect(() => {\n  // \tif (currentUser != null) {\n  // \t  db.child(\"users\")\n  // \t\t.child(currentUser.uid)\n  // \t\t.child(\"budget\")\n  // \t\t.child(\"budgettracker\")\n  // \t\t.child(\"expenseTotal\")\n  // \t\t.on(\"value\", (snapshot) => {\n  // \t\tconst array = snapshot.val();\n  // \t\tsetState(array);\n  // \t});\n  //   }}, []);\n  // 4. Sets up the app state. takes a reducer, and an initial state\n\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  if (currentUser != null) {\n    db.child(\"users\").child(currentUser.uid).child(\"budget\").child(\"budgettracker\").child(\"expenseTotal\").set(state);\n  } // const [newState, setState] = useState(state);\t\t  \n  // 5. Returns our context. Pass in the values we want to expose\n\n\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      expenses: state.expenses,\n      dispatch\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 3\n  }, this);\n};\n\n_s(AppProvider, \"Fu4fEX4m5O8FewByaaRx4WY5Gp0=\");\n\n_c2 = AppProvider;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AppReducer\");\n$RefreshReg$(_c2, \"AppProvider\");","map":{"version":3,"sources":["/Users/seanang/Orbital2021-Team-Invesfe/src/budgetTracker/AppContext.js"],"names":["React","createContext","useReducer","useContext","useState","useEffect","v4","uuidv4","db","fire","UserContext","StarRate","AppReducer","state","action","updateVariables","v","currentUser","child","uid","set","newVariables","type","expenses","payload","filter","expense","id","budget","AppContext","AppProvider","props","initialState","setState","dispatch","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,UAA3C,EAAuDC,QAAvD,EAAiEC,SAAjE,QAAkF,OAAlF;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,SAASC,EAAT,EAAaC,IAAb,QAAyB,uBAAzB;AACA,SAASC,WAAT,QAA2B,2BAA3B;AACA,SAASC,QAAT,QAAyB,oBAAzB,C,CAGA;;;AACA,OAAO,MAAMC,UAAU,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAE5C,QAAMC,eAAe,GAAGC,CAAxB;;AACA,MAAIC,WAAW,IAAI,IAAnB,EAAyB;AACxBT,IAAAA,EAAE,CAACU,KAAH,CAAS,OAAT,EACEA,KADF,CACQD,WAAW,CAACE,GADpB,EAEED,KAFF,CAEQ,QAFR,EAGEA,KAHF,CAGQ,eAHR,EAIEA,KAJF,CAIQ,cAJR,EAKEE,GALF,CAKMP,KALN;AAME;;AAGH,MAAIQ,YAAY,GAAG,EAAnB;;AACA,UAAQP,MAAM,CAACQ,IAAf;AAEC,SAAK,aAAL;AAECD,MAAAA,YAAY,GAAG,EACd,GAAGR,KADW;AAEdU,QAAAA,QAAQ,EAAE,CAAC,GAAGV,KAAK,CAACU,QAAV,EAAoBT,MAAM,CAACU,OAA3B;AAFI,OAAf;AAIAT,MAAAA,eAAe,CAACM,YAAD,CAAf;AACA,aAAOA,YAAP;;AAED,SAAK,gBAAL;AACCA,MAAAA,YAAY,GAAG,EACd,GAAGR,KADW;AAEdU,QAAAA,QAAQ,EAAEV,KAAK,CAACU,QAAN,CAAeE,MAAf,CACRC,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAeb,MAAM,CAACU,OAD1B;AAFI,OAAf;AAMA,aAAOH,YAAP;;AACD,SAAK,YAAL;AACCA,MAAAA,YAAY,GAAG,EACd,GAAGR,KADW;AAEde,QAAAA,MAAM,EAAEd,MAAM,CAACU;AAFD,OAAf;AAIA,aAAOH,YAAP;;AACD;AACC,aAAOR,KAAP;AA1BF;AA4BA,CA1CM,C,CA4CP;AAEA;AACA;AACA;AAGA;;KAnDaD,U;AAoDb,OAAO,MAAMiB,UAAU,gBAAG5B,aAAa,EAAhC,C,CAEP;AACA;;AACA,OAAO,MAAM6B,WAAW,GAAIC,KAAD,IAAW;AAAA;;AACrC,QAAM,CAACC,YAAD,EAAeC,QAAf,IAA2B7B,QAAQ,CAAC;AACzCmB,IAAAA,QAAQ,EAAE;AAD+B,GAAD,CAAzC;AAIA,QAAMN,WAAW,GAAGd,UAAU,CAACO,WAAD,CAA9B,CALqC,CAMrC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AACA,QAAM,CAACG,KAAD,EAAQqB,QAAR,IAAoBhC,UAAU,CAACU,UAAD,EAAaoB,YAAb,CAApC;;AACA,MAAIf,WAAW,IAAI,IAAnB,EAAyB;AACtBT,IAAAA,EAAE,CAACU,KAAH,CAAS,OAAT,EACEA,KADF,CACQD,WAAW,CAACE,GADpB,EAEED,KAFF,CAEQ,QAFR,EAGEA,KAHF,CAGQ,eAHR,EAIEA,KAJF,CAIQ,cAJR,EAKEE,GALF,CAKMP,KALN;AAME,GA/BgC,CAiCrC;AAGA;;;AACA,sBACC,QAAC,UAAD,CAAY,QAAZ;AACC,IAAA,KAAK,EAAE;AACNU,MAAAA,QAAQ,EAAEV,KAAK,CAACU,QADV;AAENW,MAAAA;AAFM,KADR;AAAA,cAMEH,KAAK,CAACI;AANR;AAAA;AAAA;AAAA;AAAA,UADD;AAUA,CA/CM;;GAAML,W;;MAAAA,W","sourcesContent":["import React, { createContext, useReducer, useContext, useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { db, fire } from \"../config/Firebase.js\";\nimport { UserContext} from \"../components/UserContext\";\nimport { StarRate } from '@material-ui/icons';\n\n\n// 5. The reduceer - this is used to update the state, based on the action\nexport const AppReducer = (state, action) => {\n\n\tconst updateVariables =(v)\n\tif (currentUser != null) {\n\t\tdb.child(\"users\")\n\t  .child(currentUser.uid)\n\t  .child(\"budget\")\n\t  .child(\"budgettracker\")\n\t  .child(\"expenseTotal\")\n\t  .set(state)\n\t  }\n\n\n\tlet newVariables = [];\n\tswitch (action.type) {\n\t\t\n\t\tcase 'ADD_EXPENSE':\n\t\t\t\n\t\t\tnewVariables = {\n\t\t\t\t...state,\n\t\t\t\texpenses: [...state.expenses, action.payload],\n\t\t\t};\n\t\t\tupdateVariables(newVariables);\n\t\t\treturn newVariables;\n\n\t\tcase 'DELETE_EXPENSE':\n\t\t\tnewVariables = {\n\t\t\t\t...state,\n\t\t\t\texpenses: state.expenses.filter(\n\t\t\t\t\t(expense) => expense.id !== action.payload\n\t\t\t\t),\n\t\t\t};\n\t\t\treturn newVariables;\n\t\tcase 'SET_BUDGET':\n\t\t\tnewVariables = {\n\t\t\t\t...state,\n\t\t\t\tbudget: action.payload,\n\t\t\t};\n\t\t\treturn newVariables;\n\t\tdefault:\n\t\t\treturn state;\n\t}\t\n};\n\n// 1. Sets the initial state when the app loads\n\n// const [initialState, setState] = useState({\n// \texpenses: [],\n// });\n\n\n// 2. Creates the context this is the thing our components import and use to get the state\nexport const AppContext = createContext();\n\n// 3. Provider component - wraps the components we want to give access to the state\n// Accepts the children, which are the nested(wrapped) components\nexport const AppProvider = (props) => {\n\tconst [initialState, setState] = useState({\n\t\texpenses: [],\n\t});\n\n\tconst currentUser = useContext(UserContext);\n\t// const [newState, setState] = useState();\n\t\n\t// useEffect(() => {\n\t// \tif (currentUser != null) {\n\t// \t  db.child(\"users\")\n\t// \t\t.child(currentUser.uid)\n\t// \t\t.child(\"budget\")\n\t// \t\t.child(\"budgettracker\")\n\t// \t\t.child(\"expenseTotal\")\n\t// \t\t.on(\"value\", (snapshot) => {\n\t// \t\tconst array = snapshot.val();\n\t// \t\tsetState(array);\n\t// \t});\n\t//   }}, []);\n\n\t\n\t// 4. Sets up the app state. takes a reducer, and an initial state\n\tconst [state, dispatch] = useReducer(AppReducer, initialState);\n\tif (currentUser != null) {\n\t\t\t\tdb.child(\"users\")\n\t\t\t  .child(currentUser.uid)\n\t\t\t  .child(\"budget\")\n\t\t\t  .child(\"budgettracker\")\n\t\t\t  .child(\"expenseTotal\")\n\t\t\t  .set(state)\n\t\t\t  }\n\n\t// const [newState, setState] = useState(state);\t\t  \n\t\n\n\t// 5. Returns our context. Pass in the values we want to expose\n\treturn (\n\t\t<AppContext.Provider\n\t\t\tvalue={{\n\t\t\t\texpenses: state.expenses,\n\t\t\t\tdispatch,\n\t\t\t}}\n\t\t>\n\t\t\t{props.children}\n\t\t</AppContext.Provider>\n\t);\n};"]},"metadata":{},"sourceType":"module"}