import { useEffect, useReducer, useState } from "react";
import { getSymbols } from "../actions/symbols";
var Types;
(function (Types) {
    Types["LOADING"] = "loading";
    Types["SUCCESS"] = "success";
    Types["ERROR"] = "error";
})(Types || (Types = {}));
const initialState = {
    isLoading: false,
    isError: false,
    isSuccess: false,
};
const reducer = (state, action) => {
    switch (action) {
        case Types.LOADING:
            return {
                isLoading: true,
                isError: false,
                isSuccess: false,
            };
        case Types.SUCCESS:
            return { isLoading: false, isError: false, isSuccess: true };
        case Types.ERROR:
            return { isLoading: false, isError: true, isSuccess: false };
        default:
            return state;
    }
};
export const useSearchSymbols = (search, market) => {
    const [symbols, setSymbols] = useState([]);
    const [status, dispatchStatus] = useReducer(reducer, initialState);
    const [timerId, setTimerId] = useState();
    // Debounces API call to fetch symbols
    useEffect(() => {
        dispatchStatus(Types.LOADING);
        const params = {
            text: search,
            hl: 1,
            type: market,
        };
        const newTimerId = setTimeout(() => {
            getSymbols(params)
                .then((symbolsResponse) => {
                setSymbols(symbolsResponse);
                dispatchStatus(Types.SUCCESS);
            })
                .catch(() => {
                dispatchStatus(Types.ERROR);
            });
        }, 500);
        if (timerId == null) {
            setTimerId(newTimerId);
        }
        else {
            // Clears queued API call with new one with 500ms timeout
            clearTimeout(timerId);
            setTimerId(newTimerId);
        }
    }, [search, market]);
    return Object.assign({ symbols }, status);
};
//# sourceMappingURL=useSearchSymbols.js.map