var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { config } from "../config";
import { Routes } from "../types/config";
import axios from "axios";
import { MarketTypes } from "../types/markets";
export const getSymbols = (queryParams) => __awaiter(void 0, void 0, void 0, function* () {
    const targetParams = `?type=${queryParams.type === MarketTypes.ALL ? "" : queryParams.type.toLowerCase()}&text=${queryParams.text}&hl=${queryParams.hl}&exchange=&lang=en&domain=production`;
    const symbolsEndpoint = `${config.endpoint}/${Routes.SYMBOL_SEARCH}`;
    const response = yield axios.get(config.proxyEndpoint, {
        params: { url: symbolsEndpoint + targetParams },
    });
    if (response.status !== 200) {
        throw "getSymbols failed " + response.status;
    }
    return response.data;
});
//# sourceMappingURL=symbols.js.map